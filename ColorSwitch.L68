00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 11/26/2017 11:12:32 PM

00001000                             1  START ORG $1000 
00001000                             2  
00001000  =0000005C                  3  DRAWING_MODE            EQU 92
00001000  =00000021                  4  SET_OUTPUT_WINDOW       EQU 33
00001000  =00000011                  5  DOUBLE_BUFFERED_MODE    EQU 17
00001000  =0000005E                  6  REPAINT_SCREEN          EQU 94
00001000  =00000014                  7  BALL_WIDTH              EQU 20
00001000  =00000014                  8  BALL_HEIGHT             EQU 20
00001000  =00000050                  9  SET_PEN_COLOR           EQU 80
00001000  =00000051                 10  SET_FILL_COLOR          EQU 81
00001000  =0000005D                 11  SET_PEN_WIDTH           EQU 93
00001000  =00000015                 12  SET_FONT_PROPS          EQU 21
00001000  =0162B1BA                 13  DRAW_PIXEL              EQU 23245242
00001000  =00000054                 14  DRAW_LINE_FROM_TO       EQU 84
00001000  =00000055                 15  DRAW_LINE_TO            EQU 85
00001000  =00000058                 16  DRAW_CIRCLE             EQU 88
00001000  =00000013                 17  KEY_TRAP                EQU 19
00001000  =0000005F                 18  DRAW_STRING             EQU 95
00001000  =00000008                 19  TIME                    EQU 8
00001000  =000000C8                 20  DEBOUNCETIME            EQU 200
00001000  =00000053                 21  GET_PIXEL               EQU 83
00001000                            22  ALL_REGS                REG d0-d7/a0-a6
00001000  =00000280                 23  SCREEN_WIDTH            EQU 640
00001000  =000001E0                 24  SCREEN_HEIGHT           EQU 480
00001000  =003C00FF                 25  COLOR_RED               EQU $003c00ff
00001000  =0000BAFF                 26  COLOR_YELLOW            EQU $0000baff
00001000  =00FF006C                 27  COLOR_PURPLE            EQU $00ff006c
00001000  =00FFBA00                 28  COLOR_BLUE              EQU $00ffba00
00001000  =0001AE00                 29  BALL_INIT_Y_POS         EQU 430<<8
00001000  =00000012                 30  FONT_SIZE               EQU 18
00001000                            31  
00001000                            32      *SCREEN SETUP*
00001000  103C 0021                 33      move.b  #SET_OUTPUT_WINDOW, d0
00001004  223C 028001E0             34      move.l  #SCREEN_WIDTH*$10000+SCREEN_HEIGHT,D1        
0000100A  4E4F                      35      trap    #15
0000100C                            36      
0000100C                            37      *DOUBLE BUFFERED DRAWING*
0000100C  705C                      38      moveq.l #DRAWING_MODE,d0
0000100E  7211                      39      moveq.l #DOUBLE_BUFFERED_MODE,d1
00001010  4E4F                      40      trap    #15
00001012                            41      
00001012  4EB9 00002B32             42      jsr     LoadSounds
00001018                            43      
00001018                            44  StartingPoint:
00001018                            45      *DRAWING BACKGROUND ONCE*
00001018  4EB9 000011BA             46      jsr     DrawBackground
0000101E                            47      
0000101E  4EB9 000029A6             48      jsr     GetRandomColorInD6
00001024  23C6 00002C3E             49      move.l  d6, BALL_COLOR
0000102A  4EB9 00001966             50      jsr     ClearObstacleAndPowerupLists
00001030                            51      *SPAWN FIRST OBSTACLE*
00001030  41F9 000FC90E             52      lea     OBSTACLE_LIST, a0
00001036  52B9 000FD0DE             53      add.l   #1, OBSTACLE_COUNT
0000103C  3039 00001E80             54      move.w  BOX_S_X_INIT, d0
00001042  2239 00001E82             55      move.l  BOX_S_Y_INIT, d1
00001048  4EB9 00001B3C             56      jsr     SpawnFirstBox
0000104E                            57      
0000104E                            58      *MAYBE SPAWN A POWERUP TOO* 
0000104E  33F9 00001E80 000FD0EA    59      move.w  BOX_S_X_INIT, SCORE_X
00001058  23F9 00001E82 000FD0EC    60      move.l  BOX_S_Y_INIT, SCORE_Y
00001062  4EB9 000018D8             61      jsr     RollDieToSpawnPowerup
00001068                            62      
00001068  4EB9 000013BE             63      jsr     SmallDelay
0000106E  4EB9 00001798             64      jsr     AddNewObstacle
00001074  4EB9 000013BE             65      jsr     SmallDelay
0000107A  4EB9 00001798             66      jsr     AddNewObstacle
00001080  4EB9 00001402             67      jsr     DrawInstructions
00001086                            68  PreGame:
00001086                            69      *SET UP THE GAME*
00001086  4EB9 00001742             70      jsr     UpdateObstacles
0000108C  4EB9 00001598             71      jsr     DrawBall
00001092  4EB9 000027BE             72      jsr     DrawScore
00001098  4EB9 00001118             73      jsr     SwapBuffers
0000109E                            74  
0000109E                            75  PreGameLoop:
0000109E                            76      *LOOPS TILL INPUT IS RECEIVED*
0000109E  4EB9 00001132             77      jsr     GetDeltaTime
000010A4  4EB9 000013CE             78      jsr     InstructionLoop
000010AA  4EB9 00001118             79      jsr     SwapBuffers
000010B0  103C 0013                 80      move.b  #KEY_TRAP, d0
000010B4  7220                      81      move.l  #' ', d1
000010B6  4E4F                      82      trap    #15
000010B8  0801 0000                 83      btst    #0, d1
000010BC  67E0                      84      beq     PreGameLoop
000010BE                            85      
000010BE  4EB9 00001474             86      jsr     ClearInstructions
000010C4  4EB9 00002B7A             87      jsr     PlayTheme
000010CA                            88      
000010CA  7008                      89      move.l  #TIME, d0
000010CC  4E4F                      90      trap    #15
000010CE                            91  
000010CE  23C1 00002C56             92      move.l  d1, (PREV_TIME)      ;setting up previous time for the first delta calculation
000010D4                            93      
000010D4                            94  GameLoop:
000010D4                            95      *MAIN GAME LOOP - RUNS EVERY FRAME OF THE GAME*
000010D4  4EB9 00001132             96      jsr     GetDeltaTime
000010DA  4EB9 000015CE             97      jsr     DrawBgChunk
000010E0  4EB9 00001742             98      jsr     UpdateObstacles
000010E6  4EB9 0000187C             99      jsr     UpdatePowerups
000010EC  4EB9 000018AA            100      jsr     UpdateSwitchers
000010F2  4EB9 0000114C            101      jsr     GetKeyUps
000010F8  4EB9 00001166            102      jsr     GetInput
000010FE  4EB9 000014E4            103      jsr     UpdateBall      
00001104  4EB9 0000162E            104      jsr     CheckCollision
0000110A  4EB9 00001598            105      jsr     DrawBall   
00001110  4EB9 00001118            106      jsr     SwapBuffers
00001116  60BC                     107      bra.s   GameLoop
00001118                           108          
00001118                           109  SwapBuffers:
00001118                           110      *SWAPS THE BUFFERS IN DOUBLE BUFFERED MODE*
00001118  103C 005E                111      move.b  #REPAINT_SCREEN,d0
0000111C  4E4F                     112      trap    #15
0000111E  4E75                     113      rts  
00001120                           114  
00001120                           115  ClearAllRegs:
00001120                           116      *CLEARS ALL DATA REGISTERS*
00001120  4280                     117      clr.l   d0
00001122  4281                     118      clr.l   d1
00001124  4282                     119      clr.l   d2
00001126  4283                     120      clr.l   d3
00001128  4284                     121      clr.l   d4
0000112A  4285                     122      clr.l   d5
0000112C  4286                     123      clr.l   d6
0000112E  4287                     124      clr.l   d7
00001130  4E75                     125      rts
00001132                           126          
00001132                           127  GetDeltaTime:
00001132                           128      *SUBTRACTS PREV_TIME FROM CURRENT_TIME TO GET DELTA TIME*
00001132  7008                     129      move.l  #TIME, d0
00001134  4E4F                     130      trap    #15
00001136  2001                     131      move.l  d1, d0
00001138  92B9 00002C56            132      sub.l   (PREV_TIME), d1
0000113E  33C1 00002C4C            133      move.w  d1, (DELTA_TIME)
00001144  23C0 00002C56            134      move.l  d0, (PREV_TIME)
0000114A  4E75                     135      rts
0000114C                           136          
0000114C                           137  GetKeyUps:
0000114C                           138      *SETS KEY_PRESSED TO 0 IF INPUT KEY WAS NOT PRESSED LAST FRAME*
0000114C  7013                     139      move.l  #KEY_TRAP, d0
0000114E  7220                     140      move.l  #' ', d1
00001150  4E4F                     141      trap    #15
00001152  0801 0000                142      btst.l  #0, d1
00001156  6600 000C                143      bne     EndKeyUp
0000115A  23FC 00000000 00002C5A   144      move.l  #0, (KEY_PRESSED)
00001164                           145  EndKeyUp
00001164  4E75                     146      rts     
00001166                           147          
00001166                           148  GetInput:
00001166                           149      *READS INPUT KEY AND ADDS FORCE TO BALL IF PRESSED*
00001166                           150      
00001166                           151      *debounce logic
00001166  2039 00002C4C            152      move.l  (DELTA_TIME), d0
0000116C  D1B9 00002C52            153      add.l   d0, (TIME_SINCE_LAST_KEY)
00001172  0CB9 000000C8 00002C52   154      cmp.l   #DEBOUNCETIME, (TIME_SINCE_LAST_KEY)
0000117C  6F00 003A                155      ble     Done
00001180                           156      
00001180                           157  ProceedGettingInput
00001180                           158      *check if key was pressed last frame
00001180  0CB9 00000000 00002C5A   159      cmp.l   #0, (KEY_PRESSED)
0000118A  6600 002C                160      bne     Done
0000118E                           161      
0000118E                           162      *check if key was  pressed this frame, and add force to ball
0000118E  103C 0013                163      move.b  #KEY_TRAP, d0
00001192  7220                     164      move.l  #' ', d1
00001194  4E4F                     165      trap    #15
00001196  0801 0000                166      btst    #0, d1
0000119A  6700 001C                167      beq     done
0000119E  23FC 00000000 00002C52   168      move.l  #0, (TIME_SINCE_LAST_KEY)
000011A8  23FC 00000001 00002C5A   169      move.l  #1, (KEY_PRESSED)
000011B2  4EB9 000014D0            170      jsr     AddForceToBall
000011B8                           171  Done
000011B8  4E75                     172      rts
000011BA                           173          
000011BA                           174          
000011BA                           175  DrawBackground:
000011BA                           176      *DRAWS THE BACKGROUND BITMAP*
000011BA  48E7 FFFE                177      movem.l ALL_REGS, -(sp)
000011BE                           178      
000011BE  9FFC 00000020            179      sub.l   #32, sp
000011C4                           180      
000011C4                           181      *moving all the argument values into stack
000011C4  2F7C 00002C5E 0000       182      move.l  #Background, DrawBitmapAddress(sp)
000011CC  2F7C 00000000 0004       183      move.l  #0, DrawBitmapX(sp)
000011D4  2F7C 00000000 0008       184      move.l  #0, DrawBitmapY(sp)
000011DC  2F7C 00000280 000C       185      move.l  #SCREEN_WIDTH, DrawBitmapWidth(sp)
000011E4  2F7C 000001E0 0010       186      move.l  #SCREEN_HEIGHT, DrawBitmapHeight(sp)
000011EC  2F7C 00000000 0014       187      move.l  #0, DrawBitmapScreenX(sp)
000011F4  2F7C 00000000 0018       188      move.l  #0, DrawBitmapScreenY(sp)
000011FC  2F7C 00000000 001C       189      move.l  #0, PrintAbsolute(sp)
00001204                           190      
00001204  4EB9 00002494            191      jsr     DrawBitmap
0000120A                           192      
0000120A  DFFC 00000020            193      add.l   #32, sp
00001210                           194      
00001210  4CDF 7FFF                195      movem.l (sp)+, ALL_REGS
00001214                           196      
00001214  4E75                     197      rts
00001216                           198      
00001216                           199       
00001216                           200       
00001216                           201  EndGame:
00001216                           202      *PERFORMS END-GAME CLEANUP AND DRAWS INFO*
00001216  4EB9 00002BA4            203      jsr     PlayDeathSound
0000121C  23FC 00C6C6C6 00002C3E   204      move.l  #$00c6c6c6, BALL_COLOR
00001226  4EB9 00001598            205      jsr     DrawBall                        ;draw the ball in light grey 
0000122C  7051                     206      move.l  #SET_FILL_COLOR, d0
0000122E  223C 00FFFFFF            207      move.l  #$00FFFFFF, d1                  ;set the text bg to be white
00001234  4E4F                     208      trap    #15
00001236                           209      
00001236  7015                     210      move.l  #SET_FONT_PROPS, d0             ;set font properties
00001238  2239 00002C42            211      move.l  NEUTRAL_COLOR, d1               ;draw the text in neutral
0000123E  2439 000FD180            212      move.l  FONT_PROP, d2                   ;move  predefined properties in
00001244  4E4F                     213      trap    #15
00001246                           214      
00001246  41F9 000FD134            215      lea     END_DIGITS, a0
0000124C  43F9 00002969            216      lea     SCORE_DIGITS, a1
00001252                           217      
00001252  0610 0030                218      add.b   #$30, (a0)                      ;change to ascii 0
00001256  1029 0002                219      move.b  2(a1), d0
0000125A  D110                     220      add.b   d0, (a0)                        ;move first score digit into last display digit
0000125C                           221      
0000125C  0628 0030 0001           222      add.b   #$30, 1(a0)                     ;change to ascii 0
00001262  1029 0001                223      move.b  1(a1), d0
00001266  D128 0001                224      add.b   d0, 1(a0)                       ;move 2nd score digit to 2nd display digit
0000126A                           225      
0000126A  0628 0030 0002           226      add.b   #$30, 2(a0)                     ;change to ascii 0
00001270  1011                     227      move.b  (a1), d0
00001272  D128 0002                228      add.b   d0, 2(a0)                       ;move the last score digit to the first display digit
00001276                           229      
00001276  705F                     230      move.l  #DRAW_STRING, d0
00001278  3239 000FD120            231      move.w  MESSAGE_X, d1
0000127E  3439 000FD122            232      move.w  MESSAGE_Y, d2
00001284  43F9 000FD124            233      lea     EndMessage, a1                  ;draw the game over + score message
0000128A  4E4F                     234      trap    #15
0000128C                           235      
0000128C                           236      
0000128C  48E7 FFFE                237      movem.l ALL_REGS, -(sp)
00001290                           238  
00001290  4EB9 0000138A            239      jsr     CheckHighScore                  ;check if we got the high score
00001296                           240  
00001296  4CDF 7FFF                241      movem.l (sp)+, ALL_REGS
0000129A                           242      
0000129A  0642 0012                243      add.w   #FONT_SIZE, d2
0000129E  0642 0012                244      add.w   #FONT_SIZE, d2
000012A2  43F9 000FD138            245      lea     HighScoreMessage, a1        
000012A8  4E4F                     246      trap    #15                             ;print the previous high score anyway
000012AA                           247      
000012AA  0CB9 00000000 000FD17C   248      cmp.l   #0, IS_HIGH_SCORE               ;if we got high score, mention that
000012B4  6700 002C                249      beq     GoToRestart
000012B8                           250      
000012B8  0642 0012                251      add.w   #FONT_SIZE, d2
000012BC  0642 0012                252      add.w   #FONT_SIZE, d2
000012C0                           253      
000012C0  48E7 6000                254      movem.l d1-d2, -(sp)
000012C4                           255      
000012C4  7015                     256      move.l  #SET_FONT_PROPS, d0
000012C6  223C 000000FF            257      move.l  #$000000ff, d1
000012CC  2439 000FD180            258      move.l  FONT_PROP, d2                   ;we want high score message to be in red
000012D2                           259      
000012D2  4E4F                     260      trap    #15
000012D4                           261      
000012D4  4CDF 0006                262      movem.l (sp)+, d1-d2
000012D8                           263  
000012D8  705F                     264      move.l  #DRAW_STRING, d0
000012DA  43F9 000FD160            265      lea     IsHighScoreMessage, a1          ;print the message
000012E0  4E4F                     266      trap    #15
000012E2                           267      
000012E2                           268  GoToRestart
000012E2  48E7 6000                269      movem.l d1-d2, -(sp)
000012E6                           270      
000012E6  7015                     271      move.l  #SET_FONT_PROPS, d0
000012E8  2239 00002C42            272      move.l  NEUTRAL_COLOR, d1
000012EE  2439 000FD180            273      move.l  FONT_PROP, d2
000012F4                           274      
000012F4  4E4F                     275      trap    #15                             ;setting the color back to neutral
000012F6                           276      
000012F6  4CDF 0006                277      movem.l (sp)+, d1-d2
000012FA                           278      
000012FA  705F                     279      move.l  #DRAW_STRING, d0
000012FC  0642 0012                280      add.w   #FONT_SIZE, d2
00001300  0642 0012                281      add.w   #FONT_SIZE, d2
00001304  43F9 000FD14C            282      lea     RestartMessage, a1              ;print restart helper
0000130A  4E4F                     283      trap    #15
0000130C  4EB8 1118                284      jsr     SwapBuffers                     ;draw all this stuff on screen
00001310  4EB9 00002B8E            285      jsr     StopTheme                       ;stop the main theme 
00001316                           286      
00001316                           287  EndLoop
00001316                           288      *LOOPS TILL INPUT IS RECEIVED*
00001316  103C 0013                289      move.b  #KEY_TRAP, d0
0000131A  7252                     290      move.l  #'R', d1
0000131C  4E4F                     291      trap    #15
0000131E  0801 0000                292      btst    #0, d1
00001322  67F2                     293      beq     EndLoop
00001324                           294      
00001324                           295  Restart
00001324                           296      *SET ALL VARIABLES TO DEFAULT VALUES AND GO TO START*
00001324  23FC 00000000 000FC90E   297      move.l  #0, OBSTACLE_LIST
0000132E  23FC 0001AE00 00002C32   298      move.l  #BALL_INIT_Y_POS, BALLPOS_Y
00001338  23FC 00000000 00002C36   299      move.l  #0, BALL_Y_VEL
00001342  23FC 00000000 00002C3A   300      move.l  #0, BALL_Y_VEL_ADJUSTED
0000134C  23FC 00000000 00002C5A   301      move.l  #0, KEY_PRESSED
00001356  13FC 0000 00002C46       302      move.b  #0, ABOVE_MID
0000135E  23FC 00000000 000FD178   303      move.l  #0, SCORE
00001368  33FC 012C 000FD122       304      move.w  #300, MESSAGE_Y
00001370  23FC 00000000 000FD17C   305      move.l  #0, IS_HIGH_SCORE
0000137A  4EB9 00001966            306      jsr     ClearObstacleAndPowerupLists
00001380  4EB9 000028E2            307      jsr     ResetScore
00001386  4EF8 1018                308      jmp     StartingPoint
0000138A                           309     
0000138A                           310  CheckHighScore:
0000138A                           311      *COMPARES CURRENT SCORE WITH HIGH SCORE AND UPDATES HIGH SCORE AND FLAG IF NECESSARY*
0000138A  2439 000FD178            312      move.l  SCORE, d2
00001390  B4B9 000FD174            313      cmp.l   HIGH_SCORE, d2
00001396  6F00 0024                314      ble     EndHighScoreCheck
0000139A                           315      *if high score*
0000139A  23C2 000FD174            316      move.l  d2, HIGH_SCORE
000013A0  23FC 00000001 000FD17C   317      move.l  #1, IS_HIGH_SCORE
000013AA  41F9 000FD146            318      lea     HIGH_SCORE_DIGITS, a0
000013B0  43F9 000FD134            319      lea     END_DIGITS, a1
000013B6  10D9                     320      move.b  (a1)+, (a0)+
000013B8  10D9                     321      move.b  (a1)+, (a0)+
000013BA  1091                     322      move.b  (a1), (a0)
000013BC                           323  EndHighScoreCheck
000013BC  4E75                     324      rts
000013BE                           325      
000013BE                           326      
000013BE                           327      
000013BE                           328  SmallDelay:
000013BE                           329      *CREATES A SMALL DELAY*
000013BE  203C 00007FFF            330      move.l  #$7FFF, d0
000013C4                           331  DelayLoop:
000013C4  5380                     332      sub.l   #1, d0
000013C6  6700 0004                333      beq     QuitDelay
000013CA  60F8                     334      bra     DelayLoop
000013CC                           335  QuitDelay
000013CC  4E75                     336      rts
000013CE                           337  
000013CE                           338  
000013CE                           339  InstructionLoop:
000013CE                           340      *BLINKS THE INSTRUCTIONS BETWEEN GLOWING AND NOT*
000013CE  4280                     341      clr.l   d0
000013D0  3039 00002C4C            342      move.w  DELTA_TIME, d0
000013D6  D1B9 000E3C96            343      add.l   d0, ELAPSED_INS_TIME
000013DC  0CB9 00000032 000E3C96   344      cmp.l   #50, ELAPSED_INS_TIME
000013E6  6D00 0012                345      blt     QuitIns
000013EA  46B9 000FC90A            346      not.l   GLOW
000013F0  23FC 00000000 000E3C96   347      move.l  #0, ELAPSED_INS_TIME
000013FA                           348  QuitIns
000013FA  4EB9 00001402            349      jsr     DrawInstructions
00001400  4E75                     350      rts
00001402                           351  
00001402                           352  DrawInstructions:
00001402                           353      *DRAW THE VERSION OF THE INSTRUCTION BITMAP DECIDED BY THE GLOW FLAG*
00001402  48E7 FFFE                354      movem.l ALL_REGS, -(sp)
00001406                           355      
00001406  9FFC 00000020            356      sub.l   #32, sp
0000140C                           357      
0000140C                           358      *moving all the argument values into stack
0000140C  0839 0000 000FC90A       359      btst    #0, GLOW
00001414  6700 000C                360      beq     Normal
00001418  2F7C 000F02D2 0000       361      move.l  #InstructionsGlow, DrawBitmapAddress(sp)
00001420  6008                     362      bra.s   AfterNormal
00001422                           363  Normal
00001422  2F7C 000E3C9A 0000       364      move.l  #Instructions, DrawBitmapAddress(sp)
0000142A                           365  AfterNormal
0000142A  2F7C 00000000 0004       366      move.l  #0, DrawBitmapX(sp)
00001432  2F7C 00000000 0008       367      move.l  #0, DrawBitmapY(sp)
0000143A  2F7C 000000EA 000C       368      move.l  #234, DrawBitmapWidth(sp)
00001442  2F7C 00000048 0010       369      move.l  #72, DrawBitmapHeight(sp)
0000144A  2F7C 000000CB 0014       370      move.l  #203, DrawBitmapScreenX(sp)
00001452  2F7C 000000FA 0018       371      move.l  #250, DrawBitmapScreenY(sp)
0000145A  2F7C 00000000 001C       372      move.l  #0, PrintAbsolute(sp)
00001462                           373      
00001462  4EB9 00002494            374      jsr     DrawBitmap
00001468                           375      
00001468  DFFC 00000020            376      add.l   #32, sp
0000146E                           377      
0000146E  4CDF 7FFF                378      movem.l (sp)+, ALL_REGS
00001472                           379      
00001472  4E75                     380      rts
00001474                           381      
00001474                           382  ClearInstructions:
00001474                           383      *CLEAR THE PREVIOUS IMAGE OF THE INSTRUCTION WITH A GREY RECT*
00001474  48E7 FFFE                384      movem.l ALL_REGS, -(sp)
00001478                           385      
00001478  9FFC 00000020            386      sub.l   #32, sp
0000147E                           387     
0000147E  2F7C 00002C5E 0000       388      move.l  #Background, DrawBitmapAddress(sp)
00001486                           389  
00001486  2F7C 000000CB 0004       390      move.l  #203, DrawBitmapX(sp)
0000148E  2F7C 000000FA 0008       391      move.l  #250, DrawBitmapY(sp)
00001496  2F7C 000000EA 000C       392      move.l  #234, DrawBitmapWidth(sp)
0000149E  2F7C 00000048 0010       393      move.l  #72, DrawBitmapHeight(sp)
000014A6  2F7C 00000000 0014       394      move.l  #0, DrawBitmapScreenX(sp)
000014AE  2F7C 00000000 0018       395      move.l  #0, DrawBitmapScreenY(sp)
000014B6  2F7C 00000001 001C       396      move.l  #1, PrintAbsolute(sp)
000014BE                           397      
000014BE  4EB9 00002494            398      jsr     DrawBitmap
000014C4                           399      
000014C4  DFFC 00000020            400      add.l   #32, sp
000014CA                           401      
000014CA  4CDF 7FFF                402      movem.l (sp)+, ALL_REGS
000014CE                           403      
000014CE  4E75                     404      rts
000014D0                           405      
000014D0                           406      
000014D0                           407      INCLUDE "BallHandler.x68"
000014D0                           408  AddForceToBall:
000014D0                           409      *ADDS A LARGE UPWARD FORCE TO THE BALL*
000014D0  4EB9 00002B9A            410      jsr      PlayJumpSound
000014D6  2039 00002C48            411      move.l  (JUMP_FORCE),  d0
000014DC  23C0 00002C36            412      move.l  d0, (BALL_Y_VEL)
000014E2  4E75                     413      rts
000014E4                           414          
000014E4                           415  UpdateBall:
000014E4                           416      *UPDATES THE BALL'S POSITION AND VELOCITY*
000014E4  2039 00002C32            417      move.l  (BALLPOS_Y), d0
000014EA  2239 00002C3A            418      move.l  (BALL_Y_VEL_ADJUSTED), d1   
000014F0  C3F9 00002C4C            419      muls    (DELTA_TIME), d1                          
000014F6  D081                     420      add.l   d1, d0                      
000014F8  23C0 00002C32            421      move.l  d0, (BALLPOS_Y)                         ;getting adjusted velocity * delta time and adding it to position 
000014FE                           422        
000014FE  2039 00002C4E            423      move.l  (GRAVITY), d0
00001504  D1B9 00002C36            424      add.l   d0, (BALL_Y_VEL)                        ;acceleration due to gravity on actual velocity
0000150A                           425      
0000150A  0839 0000 00002C46       426      btst    #0, ABOVE_MID                           ;checks if ball was above threshold height last frame
00001512  6700 000A                427      beq     CheckIfAbove          
00001516  4EB9 0000157E            428      jsr     CheckIfBelowMid                         ;if it was, check if ball is below the threshold this frame
0000151C  6006                     429      bra.s   SkipAboveCheck                          ;if not, just keep going
0000151E                           430      
0000151E                           431  CheckIfAbove
0000151E  4EB9 00001556            432      jsr     CheckIfAboveMid                         ;checks if ball is above threshold height this frame
00001524                           433  SkipAboveCheck
00001524                           434  
00001524  23F9 00002C36 00002C3A   435      move.l  (BALL_Y_VEL), (BALL_Y_VEL_ADJUSTED)     ;move actual velocity to adjusted velocity
0000152E  0839 0000 00002C46       436      btst    #0, (ABOVE_MID)         
00001536  6700 001C                437      beq     ReturnUpdateBall                        ;if ball isn't above threshold this frame, return
0000153A                           438      
0000153A  2C39 00002C36            439      move.l  (BALL_Y_VEL), d6                        ;else adjust velocity to facilitate scrolling   
00001540  CDFC 000B                440      muls    #11, d6
00001544  8DFC 0014                441      divs    #20, d6
00001548  CCBC 0000FFFF            442      and.l   #$0000ffff, d6                          ;clearing remainder of divison
0000154E  23C6 00002C3A            443      move.l  d6, (BALL_Y_VEL_ADJUSTED)               ;adjusted velocity = 11/20*actual velocity
00001554                           444      
00001554                           445  ReturnUpdateBall
00001554  4E75                     446      rts
00001556                           447      
00001556                           448          
00001556                           449  CheckIfAboveMid:
00001556                           450      *IF BALL JUST WENT ABOVE A THRESHOLD, SETS ABOVE_MID TO TRUE SO THAT OBSTACLES CAN SCROLL DOWN*
00001556  0CB9 00012200 00002C32   451      cmp.l   #((SCREEN_HEIGHT/2)<<8 + 50<<8),BALLPOS_Y  ;compare ball position with threshold
00001560  6C00 001A                452      bge     ReturnCheck      
00001564                           453      
00001564  2239 00002C36            454      move.l  BALL_Y_VEL, d1
0000156A  B2BC 00000000            455      cmp.l   #0, d1                                  ;check that ball is going up
00001570  6E00 000A                456      bgt     ReturnCheck
00001574                           457      
00001574  13FC 0001 00002C46       458      move.b  #1, (ABOVE_MID)                         ;if true, set above mid
0000157C                           459      
0000157C                           460  ReturnCheck
0000157C  4E75                     461      rts
0000157E                           462   
0000157E                           463      
0000157E                           464      
0000157E                           465      
0000157E                           466  CheckIfBelowMid:
0000157E                           467      *CHECKS IF BALL CAME BACK BELOW THE THRESHOLD AND CLEARS ABOVE_MID IF SO*
0000157E                           468      
0000157E  2639 00002C36            469      move.l  BALL_Y_VEL, d3
00001584  B6BC 00000000            470      cmp.l   #0, d3
0000158A                           471      
0000158A  6D00 000A                472      blt     ReturnBelowMid
0000158E                           473      
0000158E  13FC 0000 00002C46       474      move.b  #0, (ABOVE_MID)
00001596                           475  ReturnBelowMid
00001596  4E75                     476      rts
00001598                           477  
00001598                           478  
00001598                           479  
00001598                           480  DrawBall:
00001598                           481      *DRAWS THE BALL AT THE CURRENT POSITION WITH CURRENT COLOR*
00001598  2239 00002C3E            482      move.l  BALL_COLOR, d1
0000159E  7050                     483      move.l  #SET_PEN_COLOR, d0
000015A0  4E4F                     484      trap    #15
000015A2  7051                     485      move.l  #SET_FILL_COLOR, d0
000015A4  4E4F                     486      trap    #15
000015A6                           487     
000015A6  2239 00002C2E            488      move.l  (BALLPOS_X), d1
000015AC                           489      
000015AC  2601                     490      move.l  d1, d3
000015AE  0683 00000014            491      add.l   #BALL_WIDTH, d3
000015B4  5383                     492      sub.l   #1, d3
000015B6                           493      
000015B6  2439 00002C32            494      move.l  (BALLPOS_Y), d2
000015BC  E082                     495      asr.l   #8, d2                        ;bring Y position back to 2^0 land
000015BE                           496      
000015BE  2802                     497      move.l  d2, d4
000015C0  0684 00000014            498      add.l   #BALL_HEIGHT, d4
000015C6  5384                     499      sub.l   #1, d4
000015C8                           500      
000015C8  7058                     501      move.l  #DRAW_CIRCLE, d0
000015CA                           502      
000015CA  4E4F                     503      trap    #15
000015CC                           504      
000015CC  4E75                     505      rts     
000015CE                           506  
000015CE                           507  
000015CE                           508  DrawBgChunk:
000015CE                           509      *DRAWS THE CHUNK  OF THE BITMAP BEHIND THE BALL*
000015CE  48E7 FFFE                510      movem.l ALL_REGS, -(sp)
000015D2                           511      
000015D2  2039 00002C32            512      move.l  (BALLPOS_Y), d0
000015D8                           513      
000015D8  E080                     514      asr.l   #8, d0
000015DA                           515      
000015DA  9FFC 00000020            516      sub.l   #32, sp
000015E0                           517      
000015E0  2F7C 00002C5E 0000       518      move.l  #Background, DrawBitmapAddress(sp)
000015E8  2F79 00002C2E 0004       519      move.l  (BALLPOS_X), DrawBitmapX(sp)
000015F0  2F40 0008                520      move.l  d0, DrawBitmapY(sp)
000015F4  2F7C 00000014 000C       521      move.l  #(BALL_WIDTH), DrawBitmapWidth(sp)
000015FC  2F7C 00000014 0010       522      move.l  #(BALL_HEIGHT), DrawBitmapHeight(sp)
00001604  2F7C 00000000 0014       523      move.l  #0, DrawBitmapScreenX(sp)
0000160C  2F7C 00000000 0018       524      move.l  #0, DrawBitmapScreenY(sp)
00001614  2F7C 00000001 001C       525      move.l  #1, PrintAbsolute(sp)
0000161C                           526      
0000161C  4EB9 00002494            527      jsr     DrawBitmap
00001622                           528      
00001622  DFFC 00000020            529      add.l   #32, sp
00001628                           530      
00001628  4CDF 7FFF                531      movem.l (sp)+, ALL_REGS
0000162C                           532      
0000162C  4E75                     533      rts
0000162E                           534  
0000162E                           535  CheckCollision:
0000162E                           536       *CHECKS FOR PIXEL COLLISION AT 8 POINTS AROUND THE BALL*
0000162E  2C39 00002C2E            537       move.l (BALLPOS_X), d6
00001634  2E39 00002C32            538       move.l (BALLPOS_Y), d7
0000163A  E087                     539       asr.l  #8, d7 
0000163C                           540       
0000163C  7053                     541       move.l #GET_PIXEL, d0
0000163E  2206                     542       move.l d6, d1
00001640  2407                     543       move.l d7, d2
00001642  0681 0000000A            544       add.l  #10, d1                 ;top mid pixel
00001648  4E4F                     545       trap   #15
0000164A  B0B9 00002C3E            546       cmp.l  (BALL_COLOR), d0
00001650  6700 000C                547       beq    ProceedFirst
00001654  B0B9 00002C42            548       cmp.l  (NEUTRAL_COLOR), d0     ;if the pixel is not the color of ball or background, game over
0000165A  6600 FBBA                549       bne    EndGame
0000165E                           550  ProceedFirst:
0000165E  7053                     551       move.l #GET_PIXEL, d0
00001660  0682 00000013            552       add.l  #19, d2                 ;bot mid pixel
00001666  4E4F                     553       trap   #15
00001668  B0B9 00002C3E            554       cmp.l  (BALL_COLOR), d0
0000166E  6700 000C                555       beq    ProceedSecond
00001672  B0B9 00002C42            556       cmp.l (NEUTRAL_COLOR), d0
00001678  6600 FB9C                557       bne    EndGame
0000167C                           558  ProceedSecond:
0000167C  7053                     559       move.l #GET_PIXEL, d0
0000167E  2206                     560       move.l d6, d1
00001680  2407                     561       move.l d7, d2
00001682  0682 0000000A            562       add.l  #10, d2                 ;left mid pixel
00001688  4E4F                     563       trap   #15
0000168A  B0B9 00002C3E            564       cmp.l  (BALL_COLOR), d0
00001690  6700 000C                565       beq    ProceedThird
00001694  B0B9 00002C42            566       cmp.l  (NEUTRAL_COLOR), d0
0000169A  6600 FB7A                567       bne    EndGame
0000169E                           568  ProceedThird:
0000169E  7053                     569       move.l #GET_PIXEL, d0
000016A0  0681 00000013            570       add.l  #19, d1                 ;right mid pixel
000016A6  4E4F                     571       trap   #15
000016A8  B0B9 00002C3E            572       cmp.l  (BALL_COLOR), d0
000016AE  6700 000C                573       beq    ProceedFourth
000016B2  B0B9 00002C42            574       cmp.l  (NEUTRAL_COLOR), d0
000016B8  6600 FB5C                575       bne    EndGame
000016BC                           576  ProceedFourth:
000016BC  2206                     577       move.l d6, d1
000016BE  2407                     578       move.l d7, d2
000016C0  5A81                     579       add.l  #5, d1
000016C2  5A82                     580       add.l  #5, d2                  ;north-west pixel
000016C4  7053                     581       move.l #GET_PIXEL, d0
000016C6  4E4F                     582       trap   #15
000016C8  B0B9 00002C3E            583       cmp.l  (BALL_COLOR), d0
000016CE  6700 000C                584       beq    ProceedFifth
000016D2  B0B9 00002C42            585       cmp.l  (NEUTRAL_COLOR), d0
000016D8  6600 FB3C                586       bne    EndGame
000016DC                           587  ProceedFifth:
000016DC  0681 0000000A            588       add.l  #10, d1                 ;north-east pixel 
000016E2  7053                     589       move.l #GET_PIXEL, d0
000016E4  4E4F                     590       trap   #15
000016E6  B0B9 00002C3E            591       cmp.l  (BALL_COLOR), d0
000016EC  6700 000C                592       beq    ProceedSixth
000016F0  B0B9 00002C42            593       cmp.l  (NEUTRAL_COLOR), d0 
000016F6  6600 FB1E                594       bne    EndGame
000016FA                           595  ProceedSixth:  
000016FA  2206                     596       move.l d6, d1
000016FC  2407                     597       move.l d7, d2
000016FE  5A81                     598       add.l  #5, d1
00001700  0682 0000000F            599       add.l  #15, d2                 ;south-west pixel
00001706  7053                     600       move.l #GET_PIXEL, d0
00001708  4E4F                     601       trap   #15
0000170A  B0B9 00002C3E            602       cmp.l  (BALL_COLOR), d0
00001710  6700 000C                603       beq    ProceedSeventh
00001714  B0B9 00002C42            604       cmp.l  (NEUTRAL_COLOR), d0
0000171A  6600 FAFA                605       bne    EndGame
0000171E                           606  ProceedSeventh:
0000171E  0681 0000000A            607       add.l  #10, d1                 ;south-east pixel
00001724  7053                     608       move.l #GET_PIXEL, d0
00001726  4E4F                     609       trap   #15
00001728  B0B9 00002C3E            610       cmp.l  (BALL_COLOR), d0
0000172E  6700 000C                611       beq    ProceedEighth
00001732  B0B9 00002C42            612       cmp.l  (NEUTRAL_COLOR), d0
00001738  6600 0004                613       bne    EndCall
0000173C                           614  ProceedEighth:
0000173C  4E75                     615       rts
0000173E                           616  EndCall:    
0000173E  4EB8 1216                617       jsr    EndGame
00001742                           618  
00001742                           619  
00001742                           620  
00001742                           621  -------------------- end include --------------------
00001742                           622      INCLUDE "ObjectHandler.x68"
00001742                           623   
00001742                           624     
00001742                           625  UpdateObstacles:
00001742                           626       *LOOPS THROUGH OBSTACLES AND CALLS THEIR UPDATE FUNCTIONS*
00001742                           627       
00001742                           628       *if an obstacle has gone offscreen, spawn a new one*
00001742  0CB9 00000003 000FD0DE   629       cmp.l  #3, OBSTACLE_COUNT
0000174C  6700 0008                630       beq    ContinueUpdatingObstacles
00001750  4EB9 00001798            631       jsr    AddNewObstacle
00001756                           632       
00001756                           633  ContinueUpdatingObstacles
00001756  41F9 000FC90E            634       lea    OBSTACLE_LIST, a0           ;load start of obstacle list to a0
0000175C  7E03                     635       move.l #3, d7                      ;we only have 3 active elements at any given  time
0000175E                           636  ObstacleUpdateLoop
0000175E  BEBC 00000000            637       cmp.l  #0, d7
00001764  6700 002C                638       beq    FinishUpdatingObstacles     ;if  done, quit the loop
00001768                           639       
00001768  0C90 00000001            640       cmp.l  #1, (a0)                    ;if the obstacle is alive, update it
0000176E  6600 0018                641       bne    NextObstacle            
00001772  2C28 0004                642       move.l ITEM_TYPE(a0), d6           ;get the item  type 
00001776  43F9 000FD112            643       lea    UPDATE_TABLE, a1            
0000177C  E586                     644       asl.l  #2, d6                      ;shifting type by 2 to point to the right item in the update table (longs)
0000177E  2471 6000                645       move.l (a1, d6), a2                ;use the item type to offset into the update table for the right update function
00001782                           646       
00001782  2F07                     647       move.l d7, -(sp)
00001784                           648       
00001784  4E92                     649       jsr    (a2)                        ;jump to the function we found
00001786                           650       
00001786  2E1F                     651       move.l (sp)+, d7
00001788                           652  NextObstacle
00001788  D1FC 00000040            653       add.l  #TRIANGLE_CLASS_SIZE, a0    ;fetch next element
0000178E  5387                     654       subq.l #1, d7                      ;decrement pointer
00001790  60CC                     655       bra.s  ObstacleUpdateLoop
00001792                           656       
00001792                           657  FinishUpdatingObstacles
00001792  4EB8 1120                658      jsr     ClearAllRegs    
00001796  4E75                     659      rts
00001798                           660  
00001798                           661     
00001798                           662  AddNewObstacle:
00001798  41F9 000FC90E            663      lea     OBSTACLE_LIST, a0
0000179E  2A3C 7FFFFFFF            664      move.l  #$7FFFFFFF,d5               ;smallest Y to be stored here
000017A4  7603                     665      move.l  #3, d3
000017A6                           666      
000017A6                           667      *Find the lowest Y value (highest point on screen)*
000017A6                           668  FindSmallestYLoop
000017A6  B6BC 00000000            669      cmp.l   #0, d3
000017AC  6700 0022                670      beq     AfterSmallestYLoop
000017B0  0C90 00000000            671      cmp.l   #0, (a0)                    ;if item is disabled, skip it
000017B6  6700 000E                672      beq     NextItemY
000017BA  BAA8 000A                673      cmp.l   BOX_S_Y(a0), d5             ;else compare Y and update lowest Y
000017BE  6F00 0006                674      ble     NextItemY
000017C2  2A28 000A                675      move.l  BOX_S_Y(a0), d5
000017C6                           676  NextItemY
000017C6  D1FC 00000040            677      add.l   #TRIANGLE_CLASS_SIZE, a0
000017CC  5383                     678      subq.l  #1, d3
000017CE  60D6                     679      bra.s   FindSmallestYLoop
000017D0                           680      
000017D0                           681  AfterSmallestYLoop
000017D0                           682      *Set the new Y to be beyond the highest point
000017D0  9AB9 000FD0E6            683      sub.l   OBSTACLE_GAP, d5
000017D6  7603                     684      move.l  #3, d3
000017D8  41F9 000FC90E            685      lea     OBSTACLE_LIST, a0
000017DE                           686      
000017DE                           687      *find the free spot in the obstacle list*
000017DE                           688  FindSpotLoop    
000017DE  B6BC 00000000            689      cmp.l   #0, d3
000017E4  6700 0094                690      beq     QuitAddingObstacle
000017E8  0C90 00000000            691      cmp.l   #0, (a0)                    ;if the item is disabled, we've found our spot
000017EE  6600 0072                692      bne     FindNextSpot
000017F2                           693      *add new obstacle*
000017F2  4280                     694      clr.l   d0
000017F4  3039 00001E80            695      move.w  BOX_S_X_INIT, d0            ;the X position stays the same, so load it up
000017FA  2205                     696      move.l  d5, d1                      ;store the Y computed earlier in d1
000017FC                           697      
000017FC  33C0 000FD0EA            698      move.w  d0, SCORE_X                 
00001802  23C1 000FD0EC            699      move.l  d1, SCORE_Y                 ;save the values for spawning score
00001808                           700      
00001808  33C0 000FD0F0            701      move.w  d0, SWITCHER_X
0000180E  23C1 000FD0F2            702      move.l  d1, SWITCHER_Y              ;save the values for spawning switcher
00001814                           703      
00001814  2839 000FD0E6            704      move.l  OBSTACLE_GAP, d4
0000181A  E284                     705      asr.l   #1, d4                      ;divide the gap by 2
0000181C  D9B9 000FD0F2            706      add.l   d4, SWITCHER_Y              ;switcher needs to spawn at the halfway point between two obstacles
00001822                           707      
00001822  48E7 FFFE                708      movem.l  ALL_REGS, -(sp)
00001826                           709      
00001826  2F3C 00000003            710      move.l  #3, -(sp)
0000182C  2F3C 00000000            711      move.l  #0, -(sp)
00001832                           712      
00001832  4EB9 00002978            713      jsr     GetWordInRangeToD6          ;get a number between 0 and 3 exclusive
00001838                           714      
00001838  508F                     715      add.l   #8, sp
0000183A                           716      
0000183A  33C6 000FD11E            717      move.w  d6, TEMP_RANDOM             ;save it away
00001840                           718      
00001840  4CDF 7FFF                719      movem.l (sp)+, ALL_REGS
00001844  4286                     720      clr.l   d6
00001846  3C39 000FD11E            721      move.w  TEMP_RANDOM,  d6            ;we now have our item type
0000184C  E586                     722      asl.l   #2, d6                      ;multiply by 4 to get offset into the spawn table (longs)
0000184E  43F9 000FD106            723      lea     SPAWN_TABLE, a1
00001854  D3C6                     724      add.l   d6, a1                      ;add the offset to get the right spawn function
00001856  2451                     725      move.l  (a1), a2
00001858  4E92                     726      jsr     (a2)                        ;call the right spawn function
0000185A                           727      
0000185A  52B9 000FD0DE            728      add.l   #1, OBSTACLE_COUNT          
00001860                           729      
00001860  600C                     730      bra.s   AfterFindSpotLoop
00001862                           731      
00001862                           732  FindNextSpot
00001862  D1FC 00000040            733      add.l   #TRIANGLE_CLASS_SIZE, a0
00001868  5383                     734      subq.l  #1, d3
0000186A  6000 FF72                735      bra     FindSpotLoop    
0000186E                           736  AfterFindSpotLoop
0000186E                           737      *once an obstacle is spawned, potentially spawn a score inside it and spawn a switcher below it*
0000186E  4EB9 000018D8            738      jsr     RollDieToSpawnPowerup
00001874  4EB9 0000192A            739      jsr     AppendSwitcher
0000187A                           740  QuitAddingObstacle
0000187A  4E75                     741      rts
0000187C                           742  
0000187C                           743  
0000187C                           744  UpdatePowerups:
0000187C                           745      *CALL THE UPDATE POWERUP FUNCTION FOR EACH POWERUP IN THE LIST*
0000187C  41F9 000FCDBE            746      lea     SCORE_POWERUP_LIST, a0
00001882  7E03                     747      move.l  #3, d7
00001884                           748  PowerupUpdateLoop:
00001884  BEBC 00000000            749      cmp.l   #0, d7
0000188A  6700 001C                750      beq     ReturnFromUpdatePowerup
0000188E  0C90 00000001            751      cmp.l   #1, (a0)
00001894  6600 0008                752      bne     NextPowerup
00001898  4EB9 000019EE            753      jsr     UpdateScorePowerup
0000189E                           754  NextPowerup
0000189E  D1FC 0000000E            755      add.l   #SCORE_CLASS_SIZE, a0
000018A4  5387                     756      subq.l  #1, d7
000018A6  60DC                     757      bra.s   PowerupUpdateLoop
000018A8                           758  ReturnFromUpdatePowerup
000018A8  4E75                     759      rts    
000018AA                           760      
000018AA                           761      
000018AA                           762  UpdateSwitchers:
000018AA                           763      *CALL THE UPDATE SWITCHER FUNCTION FOR EACH SWITCHER IN THE LIST*
000018AA  41F9 000FCF4E            764      lea     SWITCHER_LIST, a0
000018B0  7E03                     765      move.l  #3, d7
000018B2                           766  SwitcherUpdateLoop:
000018B2  BEBC 00000000            767      cmp.l   #0, d7
000018B8  6700 001C                768      beq     ReturnFromUpdateSwitchers
000018BC  0C90 00000001            769      cmp.l   #1, (a0)
000018C2  6600 0008                770      bne     NextSwitcher
000018C6  4EB9 00002A6E            771      jsr     UpdateSwitcher
000018CC                           772  NextSwitcher
000018CC  D1FC 00000012            773      add.l   #SWITCHER_CLASS_SIZE, a0
000018D2  5387                     774      subq.l  #1, d7
000018D4  60DC                     775      bra.s   SwitcherUpdateLoop
000018D6                           776  ReturnFromUpdateSwitchers
000018D6  4E75                     777      rts    
000018D8                           778  
000018D8                           779  RollDieToSpawnPowerup:
000018D8                           780      *2 in 3 CHANCE OF SPAWNING POWERUP AT CURRENT SCORE X AND Y*
000018D8  4EB9 0000299A            781      jsr     GetRandomByteToD6
000018DE  0806 0001                782      btst    #1, d6
000018E2  6600 000A                783      bne     ProceedSpawning
000018E6  0806 0000                784      btst    #0, d6
000018EA  6700 003C                785      beq     ReturnRoll                   ;2 in 3 chance 
000018EE                           786  ProceedSpawning 
000018EE  41F9 000FCDBE            787      lea     SCORE_POWERUP_LIST, a0
000018F4  7E03                     788      move.l  #3, d7
000018F6                           789  FindPowerupSpotLoop
000018F6  BEBC 00000000            790      cmp.l   #0, d7
000018FC  6700 002A                791      beq     ReturnRoll
00001900  0C90 00000000            792      cmp.l   #0, (a0)
00001906  6600 0016                793      bne     FindNextPowerupSpot
0000190A                           794      
0000190A                           795      *SPOT IS FOUND - ADD NEW POWERUP*
0000190A                           796      
0000190A  3039 000FD0EA            797      move.w  SCORE_X, d0
00001910  2239 000FD0EC            798      move.l  SCORE_Y, d1
00001916  4EB9 000019D4            799      jsr     SpawnScorePowerup
0000191C                           800      
0000191C  600A                     801      bra.s ReturnRoll
0000191E                           802      
0000191E                           803  FindNextPowerupSpot
0000191E  D1FC 0000000E            804      add.l   #SCORE_CLASS_SIZE, a0
00001924  5387                     805      subq.l  #1, d7
00001926  60CE                     806      bra.s   FindPowerupSpotLoop
00001928                           807      
00001928                           808  ReturnRoll
00001928  4E75                     809      rts
0000192A                           810  
0000192A                           811  
0000192A                           812  AppendSwitcher:
0000192A                           813      *SPAWNS A SWITCHER AT CURRENT SWITCHER X AND SWITCHER Y*
0000192A  41F9 000FCF4E            814      lea     SWITCHER_LIST, a0
00001930  7E03                     815      move.l  #3, d7
00001932                           816  FindSwitcherSpotLoop
00001932  BEBC 00000000            817      cmp.l   #0, d7
00001938  6700 002A                818      beq     ReturnSwitcher
0000193C  0C90 00000000            819      cmp.l   #0, (a0)
00001942  6600 0016                820      bne     FindNextSwitcherSpot
00001946                           821      
00001946                           822      *SPOT IS FOUND - ADD NEW SWITCHER*
00001946  3039 000FD0F0            823      move.w  SWITCHER_X, d0
0000194C  2239 000FD0F2            824      move.l  SWITCHER_Y, d1
00001952  4EB9 00002A3E            825      jsr     SpawnSwitcher
00001958  600A                     826      bra.s   ReturnSwitcher
0000195A                           827      
0000195A                           828  FindNextSwitcherSpot
0000195A  D1FC 00000012            829      add.l   #SWITCHER_CLASS_SIZE, a0
00001960  5387                     830      subq.l  #1, d7
00001962  60CE                     831      bra.s   FindSwitcherSpotLoop
00001964                           832  ReturnSwitcher
00001964  4E75                     833      rts
00001966                           834  
00001966                           835  
00001966                           836  ClearObstacleAndPowerupLists:
00001966                           837      *CLEARS THE IS_ENABLED VALUE OF ALL ITEMS IN ALL LISTS, MAKING THEM EMPTY*
00001966  41F9 000FC90E            838      lea     OBSTACLE_LIST, a0
0000196C  20BC 00000000            839      move.l  #0, (a0)
00001972  D1FC 00000040            840      add.l   #TRIANGLE_CLASS_SIZE, a0
00001978  20BC 00000000            841      move.l  #0, (a0)
0000197E  D1FC 00000040            842      add.l   #TRIANGLE_CLASS_SIZE, a0
00001984  20BC 00000000            843      move.l  #0, (a0)
0000198A                           844      
0000198A  41F9 000FCDBE            845      lea     SCORE_POWERUP_LIST, a0
00001990  20BC 00000000            846      move.l  #0, (a0)
00001996  D1FC 0000000E            847      add.l   #SCORE_CLASS_SIZE, a0
0000199C  20BC 00000000            848      move.l  #0, (a0)
000019A2  D1FC 0000000E            849      add.l   #SCORE_CLASS_SIZE, a0
000019A8  20BC 00000000            850      move.l  #0, (a0)
000019AE                           851      
000019AE  41F9 000FCF4E            852      lea     SWITCHER_LIST, a0
000019B4  20BC 00000000            853      move.l  #0, (a0)
000019BA  D1FC 00000012            854      add.l   #SWITCHER_CLASS_SIZE, a0
000019C0  20BC 00000000            855      move.l  #0, (a0)
000019C6  D1FC 00000012            856      add.l   #SWITCHER_CLASS_SIZE, a0
000019CC  20BC 00000000            857      move.l  #0, (a0)
000019D2                           858  
000019D2  4E75                     859      rts
000019D4                           860  
000019D4                           861  
000019D4                           862  -------------------- end include --------------------
000019D4                           863      INCLUDE "ScorePowerup.x68"
000019D4                           864   
000019D4  =00000004                865  POWERUP_TYPE            EQU 4
000019D4  =00000014                866  SCORE_WIDTH             EQU 20
000019D4  =00000014                867  SCORE_HEIGHT            EQU SCORE_WIDTH
000019D4                           868  
000019D4  =0000000E                869  SCORE_CLASS_SIZE        EQU 14
000019D4                           870  
000019D4  =0000000A                871  TRIANGLE_HALF_SIZE      EQU SCORE_WIDTH/2
000019D4                           872  SpawnScorePowerup:
000019D4                           873      *SPAWNS A SCORE POWERUP AT THE GIVEN LOCATION WITH POSITION, STORES VALUES STARTING AT A0*
000019D4  217C 00000001 0000       874      move.l  #1, IS_ENABLED(a0)
000019DC  217C 00000001 0004       875      move.l  #1, POWERUP_TYPE(a0)
000019E4  3140 0008                876      move.w  d0, BOX_S_X(a0)
000019E8  2141 000A                877      move.l  d1, BOX_S_Y(a0)
000019EC  4E75                     878      rts
000019EE                           879      
000019EE                           880      
000019EE                           881      
000019EE                           882  UpdateScorePowerup:
000019EE                           883      *UPDATES POSITION OF SCORE POWERUP AND INCREMENTS SCORE ON COLLISION WITH BALL*
000019EE                           884      
000019EE                           885      *Clear Phase*
000019EE  7050                     886      move.l  #SET_PEN_COLOR, d0
000019F0  2239 00002C42            887      move.l  NEUTRAL_COLOR, d1
000019F6  4E4F                     888      trap    #15
000019F8  4EB9 00001AC8            889      jsr     DrawTriangle                    ;clear the powerup by drawing a neutral color triangle
000019FE                           890      
000019FE  0839 0000 00002C46       891      btst    #0, ABOVE_MID                   ;check if powerup needs to scroll
00001A06  6700 001E                892      beq     SkipScoreMove
00001A0A                           893      
00001A0A                           894      *Update Phase*
00001A0A                           895      
00001A0A  2028 000A                896      move.l BOX_S_Y(a0), d0             
00001A0E  2239 00002C36            897      move.l BALL_Y_VEL, d1
00001A14  C3F9 00002C4C            898      muls   (DELTA_TIME), d1
00001A1A                           899      
00001A1A  2401                     900      move.l  d1, d2
00001A1C                           901       
00001A1C  E482                     902      asr.l   #2, d2                          ;d2 = velocity * delta_time * 0.1
00001A1E                           903       
00001A1E  D282                     904      add.l   d2, d1                          ;d1 = 1.1 * velocity * delta_time
00001A20                           905       
00001A20  9081                     906      sub.l   d1, d0                          ;update position
00001A22                           907       
00001A22  2140 000A                908      move.l  d0, BOX_S_Y(a0)
00001A26                           909      
00001A26                           910  SkipScoreMove
00001A26                           911  
00001A26                           912      *Collision Check Phase*
00001A26                           913  
00001A26  0680 00001400            914      add.l   #(SCORE_HEIGHT)<<8, d0
00001A2C  B0B9 00002C32            915      cmp.l   BALLPOS_Y, d0                   ;if ball Y intersects score bitmap, update score
00001A32  6D00 000E                916      blt     NoCollision
00001A36  4EB9 00002BB8            917      jsr     PlayCoinSound
00001A3C  4EB9 00001A54            918      jsr     UpdateScore
00001A42                           919      
00001A42                           920  NoCollision
00001A42                           921      *Draw Phase*
00001A42                           922       
00001A42  7050                     923       move.l  #SET_PEN_COLOR, d0
00001A44  2239 00001B38            924       move.l  POWERUP_COLOR, d1
00001A4A  4E4F                     925       trap    #15 
00001A4C  4EB9 00001AC8            926       jsr     DrawTriangle                   ;draw triangle, but now with filled color
00001A52  4E75                     927       rts
00001A54                           928      
00001A54                           929      
00001A54                           930  UpdateScore:
00001A54                           931      *INCREASES SCORE AND DELETES POWERUP*
00001A54  217C 00000000 0000       932      move.l  #0, IS_ENABLED(a0)              ;disabling powerup because it's taken
00001A5C  43F9 00002969            933      lea     SCORE_DIGITS, a1                ;3 digit score storage
00001A62  1029 0000                934      move.b  0(a1), d0
00001A66  1229 0001                935      move.b  1(a1), d1
00001A6A  1429 0002                936      move.b  2(a1), d2
00001A6E  5200                     937      addq.b  #1, d0
00001A70  B03C 000A                938      cmp.b   #10, d0                         ;if units place overflows, add to tens place
00001A74  6D16                     939      blt.s   FinishUpdate
00001A76  103C 0000                940      move.b  #0,  d0
00001A7A  5201                     941      addq.b  #1,  d1 
00001A7C  B2BC 0000000A            942      cmp.l   #10, d1                         ;if tens place overflows, add to hundreds plcae
00001A82  6D00 0008                943      blt     FinishUpdate
00001A86  123C 0000                944      move.b  #0, d1
00001A8A  5202                     945      addq.b  #1, d2
00001A8C                           946  FinishUpdate
00001A8C  1340 0000                947      move.b  d0, 0(a1)
00001A90  1341 0001                948      move.b  d1, 1(a1)
00001A94  1342 0002                949      move.b  d2, 2(a1)                       ;move the updated scores to memory
00001A98                           950      
00001A98                           951      
00001A98                           952      *STORING THE SCORE AS ONE NUMBER*
00001A98  4282                     953      clr.l   d2
00001A9A  4281                     954      clr.l   d1
00001A9C  1229 0000                955      move.b  0(a1), d1
00001AA0  D481                     956      add.l   d1, d2
00001AA2  4281                     957      clr.l   d1
00001AA4  1229 0001                958      move.b  1(a1), d1 
00001AA8  C2FC 000A                959      mulu    #10, d1
00001AAC  D481                     960      add.l   d1, d2
00001AAE  4281                     961      clr.l   d1
00001AB0  1229 0002                962      move.b  2(a1), d1
00001AB4  C2FC 0064                963      mulu    #100, d1
00001AB8  D481                     964      add.l   d1, d2
00001ABA  23C2 000FD178            965      move.l  d2, SCORE
00001AC0                           966      
00001AC0  4EB9 000027BE            967      jsr DrawScore                           ;update the seven segment display
00001AC6  4E75                     968      rts
00001AC8                           969      
00001AC8                           970      
00001AC8                           971      
00001AC8                           972  DrawTriangle:
00001AC8                           973       *DRAWS A TRIANGLE OF SET COLOR AT CURRENT POSITION BY DRAWING 3 LINES*
00001AC8                           974       
00001AC8  705D                     975       move.l  #SET_PEN_WIDTH, d0
00001ACA  7203                     976       move.l  #3, d1
00001ACC  4E4F                     977       trap    #15                            ;setting pen width to 3
00001ACE                           978       
00001ACE  7054                     979       move.l  #DRAW_LINE_FROM_TO, d0
00001AD0                           980       
00001AD0  3A28 0008                981       move.w  BOX_S_X(a0), d5                ;d5 = CenterX 
00001AD4  2C28 000A                982       move.l  BOX_S_Y(a0), d6
00001AD8  E086                     983       asr.l   #8, d6                         ;d6 = CenterY in 2^0 form
00001ADA                           984       
00001ADA  48E7 FFFE                985       movem.l ALL_REGS, -(sp)
00001ADE                           986       
00001ADE  33FC 003C 0000263C       987       move.w  #60, ANGLE
00001AE6  4EB9 000026A4            988       jsr     GetSinAtD7                     ;d7 = sin 60
00001AEC                           989       
00001AEC  33C7 00002492            990       move.w  d7, TEMP_SINE                  ;store it in temp_sine
00001AF2                           991       
00001AF2  4CDF 7FFF                992       movem.l (sp)+, ALL_REGS
00001AF6                           993       
00001AF6  3E3C 000A                994       move.w  #TRIANGLE_HALF_SIZE, d7        ;get half the side 
00001AFA  CEF9 00002492            995       mulu    TEMP_SINE, d7                  ;h/2 = a/2 * sin 60 (equilateral triangle)
00001B00  E087                     996       asr.l   #8, d7
00001B02                           997       
00001B02  EC87                     998       asr.l   #6, d7                         ;sin was in 2^-14 land, shift product back
00001B04                           999  
00001B04                          1000                                              ;d7 = h/2
00001B04  323C FFF6               1001       move.w  #-TRIANGLE_HALF_SIZE, d1
00001B08  D245                    1002       add.w   d5, d1                         ;offset from center X
00001B0A                          1003       
00001B0A  3407                    1004       move.w  d7, d2
00001B0C  D446                    1005       add.w   d6, d2                         ;offset from center Y
00001B0E                          1006       
00001B0E  363C 000A               1007       move.w  #TRIANGLE_HALF_SIZE, d3
00001B12  D645                    1008       add.w   d5, d3
00001B14                          1009       
00001B14  3802                    1010       move.w  d2, d4
00001B16                          1011       
00001B16  4E4F                    1012       trap    #15
00001B18                          1013       
00001B18  3205                    1014       move.w  d5, d1
00001B1A                          1015       
00001B1A  4447                    1016       neg.w   d7                             ;-h/2 for the top point
00001B1C  3407                    1017       move.w  d7, d2
00001B1E  D446                    1018       add.w   d6, d2
00001B20                          1019       
00001B20  4E4F                    1020       trap #15
00001B22                          1021       
00001B22  363C FFF6               1022       move.w #-TRIANGLE_HALF_SIZE, d3
00001B26  D645                    1023       add.w  d5, d3
00001B28                          1024       
00001B28  4447                    1025       neg.w  d7
00001B2A  3807                    1026       move.w d7,  d4
00001B2C  D846                    1027       add.w  d6, d4
00001B2E                          1028       
00001B2E  4E4F                    1029       trap #15
00001B30                          1030       
00001B30  705D                    1031       move.l  #SET_PEN_WIDTH, d0
00001B32  7201                    1032       move.l  #1, d1
00001B34  4E4F                    1033       trap    #15                            ;restore pen width
00001B36                          1034  
00001B36  4E75                    1035       rts
00001B38                          1036  
00001B38                          1037  
00001B38                          1038  
00001B38                          1039  
00001B38                          1040  
00001B38= 00FFFFFF                1041  POWERUP_COLOR   dc.l    $00ffffff
00001B3C                          1042  
00001B3C                          1043  
00001B3C                          1044  
00001B3C                          1045  
00001B3C                          1046  
00001B3C                          1047  
00001B3C                          1048  
00001B3C                          1049  
00001B3C                          1050  
00001B3C                          1051  
00001B3C                          1052  
00001B3C                          1053  
00001B3C                          1054  
00001B3C                          1055  
00001B3C                          1056  
00001B3C                          1057  
00001B3C                          1058  
00001B3C                          1059  
00001B3C                          1060  -------------------- end include --------------------
00001B3C                          1061      INCLUDE "BoxObstacle.x68"
00001B3C                          1062  
00001B3C  =00000000               1063  IS_ENABLED          EQU  0
00001B3C  =00000004               1064  ITEM_TYPE           EQU  4 
00001B3C  =00000008               1065  BOX_S_X             EQU  8 
00001B3C  =0000000A               1066  BOX_S_Y             EQU  10
00001B3C  =0000000E               1067  BOX_X1              EQU  14
00001B3C  =00000010               1068  BOX_Y1              EQU  16
00001B3C  =00000012               1069  BOX_X2              EQU  18
00001B3C  =00000014               1070  BOX_Y2              EQU  20
00001B3C  =00000016               1071  BOX_X3              EQU  22
00001B3C  =00000018               1072  BOX_Y3              EQU  24
00001B3C  =0000001A               1073  BOX_X4              EQU  26
00001B3C  =0000001C               1074  BOX_Y4              EQU  28
00001B3C  =0000001E               1075  BOX_X1_O            EQU  30
00001B3C  =00000020               1076  BOX_Y1_O            EQU  32
00001B3C  =00000022               1077  BOX_X2_O            EQU  34
00001B3C  =00000024               1078  BOX_Y2_O            EQU  36
00001B3C  =00000026               1079  BOX_X3_O            EQU  38
00001B3C  =00000028               1080  BOX_Y3_O            EQU  40
00001B3C  =0000002A               1081  BOX_X4_O            EQU  42
00001B3C  =0000002C               1082  BOX_Y4_O            EQU  44
00001B3C  =0000002E               1083  BOX_ANG             EQU  46
00001B3C  =00000030               1084  BOX_ANG_FP          EQU  48
00001B3C  =00000034               1085  BOX_Y_VEL           EQU  52
00001B3C  =00000038               1086  BOX_WIDTH           EQU  56
00001B3C  =00000039               1087  DIRECTION           EQU  57
00001B3C  =0000003A               1088  BOX_SIDE_HALF       EQU  58
00001B3C  =0000003C               1089  BOX_CLASS_SIZE      EQU  60
00001B3C                          1090  
00001B3C  =0000004B               1091  MIN_BOX_HALF_LENGTH EQU  75
00001B3C  =00000069               1092  MAX_BOX_HALF_LENGTH EQU  105
00001B3C                          1093  
00001B3C  =00000009               1094  MIN_BOX_WIDTH       EQU  9
00001B3C  =0000000C               1095  MAX_BOX_WIDTH       EQU  12
00001B3C                          1096  
00001B3C  =0000A000               1097  DISTANCE_BELOW_BOTTOM_TO_KILL EQU 160<<8
00001B3C                          1098  
00001B3C                          1099  
00001B3C                          1100  SpawnFirstBox:
00001B3C                          1101      *SPAWNS THE FIRST BOX WHICH IS ALWAYS OF MAX SIZE AND MIN WIDTH*
00001B3C  317C 0069 003A          1102      move.w  #MAX_BOX_HALF_LENGTH, BOX_SIDE_HALF(a0) 
00001B42  4EB9 00001B78           1103      jsr     SetBoxParams
00001B48  117C 0009 0038          1104      move.b  #MIN_BOX_WIDTH, BOX_WIDTH(a0)
00001B4E  4E75                    1105      rts
00001B50                          1106  
00001B50                          1107  
00001B50                          1108  
00001B50                          1109  SpawnBox:
00001B50                          1110      *SPAWNS A BOX AT THE GIVEN POSITION AND AT THE GIVEN MEMORY LOCATION*
00001B50  2F00                    1111      move.l  d0, -(sp)
00001B52  2F01                    1112      move.l  d1, -(sp)
00001B54                          1113      
00001B54  2F3C 00000069           1114      move.l  #MAX_BOX_HALF_LENGTH, -(sp)
00001B5A  2F3C 0000004B           1115      move.l  #MIN_BOX_HALF_LENGTH, -(sp)
00001B60                          1116      
00001B60  4EB9 00002978           1117      jsr     GetWordInRangeToD6              ;get random size
00001B66                          1118      
00001B66  508F                    1119      add.l   #8, sp
00001B68  221F                    1120      move.l  (sp)+, d1
00001B6A  201F                    1121      move.l  (sp)+, d0
00001B6C                          1122      
00001B6C  3146 003A               1123      move.w  d6, BOX_SIDE_HALF(a0)           ;use it to set up the box
00001B70  4EB9 00001B78           1124      jsr     SetBoxParams
00001B76  4E75                    1125      rts
00001B78                          1126      
00001B78                          1127  SetBoxParams:
00001B78  2179 00001E78 0000      1128      move.l  IS_ENABLED_INIT, IS_ENABLED(a0) ;make the box enabled
00001B80  2179 00001E7C 0004      1129      move.l  BOX_TYPE_INIT, ITEM_TYPE(a0)    ;item type is box
00001B88                          1130      
00001B88  3140 0008               1131      move.w  d0, BOX_S_X(a0)
00001B8C  2141 000A               1132      move.l  d1, BOX_S_Y(a0)
00001B90                          1133      
00001B90  3828 003A               1134      move.w  BOX_SIDE_HALF(a0), d4           ;+half-width
00001B94  3A04                    1135      move.w  d4, d5
00001B96  4445                    1136      neg.w   d5                              ;-half-width
00001B98                          1137      
00001B98  3145 001E               1138      move.w  d5, BOX_X1_O(a0)
00001B9C  3145 0020               1139      move.w  d5, BOX_Y1_O(a0)
00001BA0                          1140      
00001BA0  3144 0022               1141      move.w  d4, BOX_X2_O(a0)
00001BA4  3145 0024               1142      move.w  d5, BOX_Y2_O(a0)
00001BA8                          1143      
00001BA8  3145 0026               1144      move.w  d5, BOX_X3_O(a0)
00001BAC  3144 0028               1145      move.w  d4, BOX_Y3_O(a0)
00001BB0                          1146      
00001BB0  3144 002A               1147      move.w  d4, BOX_X4_O(a0)
00001BB4  3144 002C               1148      move.w  d4, BOX_Y4_O(a0)
00001BB8                          1149      
00001BB8  2F3C 0000002D           1150      move.l  #45, -(sp)
00001BBE  2F3C 00000000           1151      move.l  #0, -(sp)
00001BC4  4EB9 00002978           1152      jsr     GetWordInRangeToD6              ;get an angle from 0-45 degrees
00001BCA  CCBC 0000FFFF           1153      and.l   #$0000ffff, d6
00001BD0  508F                    1154      add.l   #8, sp
00001BD2  E786                    1155      asl.l   #3, d6                          ;multiply by 8 to get an angle out of 360
00001BD4  3146 002E               1156      move.w  d6, BOX_ANG(a0)
00001BD8                          1157      
00001BD8  E986                    1158      asl.l   #4, d6
00001BDA  2146 0030               1159      move.l  d6, BOX_ANG_FP(a0)              ;floating point version of angle
00001BDE                          1160      
00001BDE  2179 00001E8C 0034      1161      move.l  BOX_Y_VEL_INIT, BOX_Y_VEL(a0)   
00001BE6                          1162      
00001BE6  2F3C 0000000C           1163      move.l  #MAX_BOX_WIDTH, -(sp)
00001BEC  2F3C 00000009           1164      move.l  #MIN_BOX_WIDTH, -(sp)
00001BF2  4EB9 00002978           1165      jsr     GetWordInRangeToD6              ;get a width in the given range
00001BF8  508F                    1166      addq.l  #8, sp
00001BFA                          1167      
00001BFA  1146 0038               1168      move.b  d6, BOX_WIDTH(a0)
00001BFE                          1169      
00001BFE  4EB9 0000299A           1170      jsr     GetRandomByteToD6
00001C04  0806 0001               1171      btst    #1, d6
00001C08  6600 000A               1172      bne     ReverseSpin
00001C0C  117C 0000 0039          1173      move.b  #0, DIRECTION(a0)                  
00001C12  4E75                    1174      rts
00001C14                          1175  ReverseSpin
00001C14  117C 0001 0039          1176      move.b  #1, DIRECTION(a0)
00001C1A  4E75                    1177      rts
00001C1C                          1178      
00001C1C                          1179  UpdateBox:
00001C1C                          1180      *CHANGES ROTATION, POSITION AND VELOCITY OF BOX AND REDRAWS*
00001C1C  2028 0030               1181      move.l  BOX_ANG_FP(a0), d0
00001C20  4283                    1182      clr.l   d3
00001C22                          1183      
00001C22  3639 00002C4C           1184      move.w  (DELTA_TIME), d3
00001C28                          1185      
00001C28  C6FC 000A               1186      mulu    #10, d3
00001C2C  1828 0039               1187      move.b  DIRECTION(a0), d4
00001C30  0804 0000               1188      btst    #0, d4
00001C34  6700 0004               1189      beq     NormalRotation
00001C38  4483                    1190      neg.l   d3                              ;reverse rotation
00001C3A                          1191  NormalRotation
00001C3A  D083                    1192      add.l   d3, d0                          ;get new rotation
00001C3C  2200                    1193      move.l  d0, d1
00001C3E  E681                    1194      asr.l   #3, d1
00001C40  B27C 0168               1195      cmp.w   #360, d1
00001C44  6D00 000C               1196      blt     CheckNeg
00001C48  0441 0168               1197      sub.w   #360, d1
00001C4C  0480 00000B40           1198      sub.l   #360<<3, d0
00001C52                          1199  CheckNeg
00001C52  B27C 0000               1200      cmp.w   #0, d1
00001C56  6C00 000C               1201      bge     ResumeRot
00001C5A  0641 0168               1202      add.w   #360, d1
00001C5E  0680 00000B40           1203      add.l   #360<<3, d0
00001C64                          1204  ResumeRot
00001C64  3141 002E               1205      move.w  d1, BOX_ANG(a0) 
00001C68  2140 0030               1206      move.l  d0, BOX_ANG_FP(a0)
00001C6C  4EB9 00001DF8           1207      jsr     ClearBox                        ;clear previous box
00001C72                          1208      *ROTATION PHASE*
00001C72                          1209      
00001C72  103C 005D               1210      move.b  #SET_PEN_WIDTH, d0
00001C76  1228 0038               1211      move.b  BOX_WIDTH(a0), d1
00001C7A  4E4F                    1212      trap    #15
00001C7C                          1213      
00001C7C  5D8F                    1214      sub.l   #6, sp
00001C7E                          1215      
00001C7E  3F68 002E 0000          1216      move.w  BOX_ANG(a0), ROT_ANGLE(sp)
00001C84  3F68 001E 0002          1217      move.w  BOX_X1_O(a0), ROT_LINE_X(sp)
00001C8A  3F68 0020 0004          1218      move.w  BOX_Y1_O(a0), ROT_LINE_Y(sp)
00001C90                          1219      
00001C90  2248                    1220      move.l  a0, a1
00001C92                          1221      
00001C92  4EB9 0000263E           1222      jsr     RotatePoint                     ;rotating first point
00001C98                          1223      
00001C98  2049                    1224      move.l  a1, a0
00001C9A                          1225      
00001C9A  316F 0002 000E          1226      move.w  ROT_LINE_X(sp), BOX_X1(a0)
00001CA0  316F 0004 0010          1227      move.w  ROT_LINE_Y(sp), BOX_Y1(a0)      ;saving rotated values
00001CA6                          1228      
00001CA6  3F68 0022 0002          1229      move.w  BOX_X2_O(a0), ROT_LINE_X(sp)
00001CAC  3F68 0024 0004          1230      move.w  BOX_Y2_O(a0), ROT_LINE_Y(sp)
00001CB2                          1231      
00001CB2  4EB9 0000263E           1232      jsr     RotatePoint                     ;rotating second point
00001CB8                          1233  
00001CB8                          1234      
00001CB8  2049                    1235      move.l  a1, a0
00001CBA                          1236      
00001CBA  316F 0002 0012          1237      move.w  ROT_LINE_X(sp), BOX_X2(a0)
00001CC0  316F 0004 0014          1238      move.w  ROT_LINE_Y(sp), BOX_Y2(a0)      ;saving rotated values
00001CC6                          1239    
00001CC6  3F68 0026 0002          1240      move.w  BOX_X3_O(a0), ROT_LINE_X(sp)
00001CCC  3F68 0028 0004          1241      move.w  BOX_Y3_O(a0), ROT_LINE_Y(sp)    
00001CD2                          1242  
00001CD2                          1243      
00001CD2  4EB9 0000263E           1244      jsr     RotatePoint                     ;rotating third point
00001CD8                          1245  
00001CD8                          1246      
00001CD8  2049                    1247      move.l  a1, a0    
00001CDA                          1248      
00001CDA  316F 0002 0016          1249      move.w  ROT_LINE_X(sp), BOX_X3(a0)
00001CE0  316F 0004 0018          1250      move.w  ROT_LINE_Y(sp), BOX_Y3(a0)      ;saving rotated values
00001CE6                          1251  
00001CE6  3F68 002A 0002          1252      move.w  BOX_X4_O(a0), ROT_LINE_X(sp)
00001CEC  3F68 002C 0004          1253      move.w  BOX_Y4_O(a0), ROT_LINE_Y(sp)    
00001CF2                          1254  
00001CF2                          1255      
00001CF2  4EB9 0000263E           1256      jsr     RotatePoint                     ;rotating fourth point
00001CF8                          1257  
00001CF8                          1258      
00001CF8  2049                    1259      move.l  a1, a0    
00001CFA                          1260      
00001CFA  316F 0002 001A          1261      move.w  ROT_LINE_X(sp), BOX_X4(a0)
00001D00  316F 0004 001C          1262      move.w  ROT_LINE_Y(sp), BOX_Y4(a0)      ;saving rotated values
00001D06                          1263  
00001D06                          1264      
00001D06  5C8F                    1265      add.l   #6, sp
00001D08                          1266      
00001D08  0839 0000 00002C46      1267      btst    #0, ABOVE_MID                   ;check if box needs to scroll
00001D10  6700 0036               1268      beq     SkipVelocity
00001D14                          1269      
00001D14                          1270      *VELOCITY PHASE*
00001D14                          1271      
00001D14  2028 000A               1272       move.l BOX_S_Y(a0), d0             
00001D18  2239 00002C36           1273       move.l BALL_Y_VEL, d1
00001D1E  C3F9 00002C4C           1274       muls   (DELTA_TIME), d1
00001D24                          1275       
00001D24  2401                    1276       move.l d1, d2
00001D26                          1277       
00001D26  E482                    1278       asr.l  #2, d2                          ;d2 = velocity * delta_time * 0.1
00001D28                          1279       
00001D28  D282                    1280       add.l  d2, d1                          ;d1 = 1.1 * velocity * delta_time
00001D2A                          1281       
00001D2A  9081                    1282       sub.l  d1, d0                          ;update position
00001D2C                          1283       
00001D2C  2140 000A               1284       move.l d0, BOX_S_Y(a0)
00001D30                          1285       
00001D30                          1286       *DESTROY CHECK*
00001D30  2A3C 0001E000           1287       move.l #SCREEN_HEIGHT<<8, d5
00001D36  0685 0000A000           1288       add.l  #DISTANCE_BELOW_BOTTOM_TO_KILL, d5
00001D3C  B085                    1289       cmp.l  d5, d0                         ;if position is below the bottom, delete box
00001D3E  6D00 0008               1290       blt    SkipVelocity
00001D42  4EB9 00001DE8           1291       jsr    DeleteBox     
00001D48                          1292  SkipVelocity
00001D48                          1293      *DRAWING PHASE - DRAWS A BOX AS FOUR LINES OF DIFFERENT COLOR*
00001D48  43F9 000FD0F6           1294      lea COLOR_ARRAY, a1
00001D4E                          1295      
00001D4E  7050                    1296      move.l  #SET_PEN_COLOR, d0
00001D50  2211                    1297      move.l  (a1), d1
00001D52                          1298      
00001D52  4E4F                    1299      trap    #15 
00001D54                          1300      
00001D54  7054                    1301      move.l  #DRAW_LINE_FROM_TO, d0
00001D56  4281                    1302      clr.l   d1
00001D58  4282                    1303      clr.l   d2
00001D5A  4283                    1304      clr.l   d3
00001D5C  2A28 000A               1305      move.l  BOX_S_Y(a0), d5
00001D60  E085                    1306      asr.l   #8, d5
00001D62                          1307      
00001D62  3228 000E               1308      move.w  BOX_X1(a0), d1
00001D66  D268 0008               1309      add.w   BOX_S_X(a0), d1
00001D6A                          1310      
00001D6A  3428 0010               1311      move.w  BOX_Y1(a0), d2
00001D6E  D445                    1312      add.w   d5, d2
00001D70                          1313      
00001D70  3628 0012               1314      move.w  BOX_X2(a0), d3
00001D74  D668 0008               1315      add.w   BOX_S_X(a0), d3
00001D78                          1316      
00001D78  3828 0014               1317      move.w  BOX_Y2(a0), d4
00001D7C  D845                    1318      add.w   d5, d4
00001D7E                          1319      
00001D7E  4E4F                    1320      trap    #15
00001D80                          1321      
00001D80  7050                    1322      move.l  #SET_PEN_COLOR, d0
00001D82  2229 0004               1323      move.l  4(a1), d1
00001D86  4E4F                    1324      trap    #15 
00001D88                          1325      
00001D88  4281                    1326      clr.l   d1
00001D8A  4282                    1327      clr.l   d2
00001D8C  4283                    1328      clr.l   d3
00001D8E                          1329      
00001D8E  7055                    1330      move.l  #DRAW_LINE_TO, d0
00001D90  3228 001A               1331      move.w  BOX_X4(a0), d1
00001D94  D268 0008               1332      add.w   BOX_S_X(a0), d1
00001D98                          1333      
00001D98  3428 001C               1334      move.w  BOX_Y4(a0), d2
00001D9C  D445                    1335      add.w   d5, d2
00001D9E                          1336      
00001D9E  4E4F                    1337      trap    #15
00001DA0                          1338      
00001DA0  7050                    1339      move.l  #SET_PEN_COLOR, d0
00001DA2  2229 0008               1340      move.l  8(a1), d1
00001DA6  4E4F                    1341      trap    #15 
00001DA8                          1342      
00001DA8  4281                    1343      clr.l   d1
00001DAA  4282                    1344      clr.l   d2
00001DAC                          1345      
00001DAC  7055                    1346      move.l  #DRAW_LINE_TO, d0
00001DAE                          1347      
00001DAE  3228 0016               1348      move.w  BOX_X3(a0), d1
00001DB2  D268 0008               1349      add.w   BOX_S_X(a0), d1
00001DB6                          1350      
00001DB6  3428 0018               1351      move.w  BOX_Y3(a0), d2
00001DBA  D445                    1352      add.w   d5, d2
00001DBC                          1353  
00001DBC  4E4F                    1354      trap    #15
00001DBE                          1355      
00001DBE  7050                    1356      move.l  #SET_PEN_COLOR, d0
00001DC0  2229 000C               1357      move.l  12(a1), d1
00001DC4                          1358      
00001DC4  4E4F                    1359      trap    #15 
00001DC6                          1360      
00001DC6  4282                    1361      clr.l   d2
00001DC8  4281                    1362      clr.l   d1
00001DCA                          1363      
00001DCA  7055                    1364      move.l  #DRAW_LINE_TO, d0
00001DCC                          1365      
00001DCC  3228 000E               1366      move.w  BOX_X1(a0), d1
00001DD0  D268 0008               1367      add.w   BOX_S_X(a0), d1
00001DD4                          1368      
00001DD4  3428 0010               1369      move.w  BOX_Y1(a0), d2
00001DD8  D445                    1370      add.w   d5, d2
00001DDA                          1371      
00001DDA  4E4F                    1372      trap    #15
00001DDC                          1373  
00001DDC                          1374  
00001DDC  103C 005D               1375      move.b  #SET_PEN_WIDTH, d0
00001DE0  123C 0001               1376      move.b  #1, d1
00001DE4  4E4F                    1377      trap    #15
00001DE6  4E75                    1378      rts
00001DE8                          1379      
00001DE8                          1380      
00001DE8                          1381  DeleteBox:
00001DE8                          1382      *EFFECTIVELY DELETES THE BOX*
00001DE8  217C 00000000 0000      1383      move.l  #0, IS_ENABLED(a0)      ;is_enabled = 0, it's ok to overwrite, and updates are stopped
00001DF0  53B9 000FD0DE           1384      subq.l  #1, OBSTACLE_COUNT      ;there is now one less obstacle in the play area
00001DF6  4E75                    1385      rts
00001DF8                          1386      
00001DF8                          1387      
00001DF8                          1388  ClearBox:
00001DF8                          1389      *CLEARS THE PREVIOUS DRAW OF THE BOX ON SCREEN BY DRAWING FOUR NEUTRAL LINES*
00001DF8  103C 005D               1390      move.b  #SET_PEN_WIDTH, d0
00001DFC  1228 0038               1391      move.b  BOX_WIDTH(a0), d1
00001E00  4E4F                    1392      trap    #15
00001E02  7050                    1393      move.l  #SET_PEN_COLOR, d0
00001E04  2239 00002C42           1394      move.l  NEUTRAL_COLOR, d1
00001E0A  4E4F                    1395      trap    #15 
00001E0C  4281                    1396      clr.l   d1
00001E0E  4282                    1397      clr.l   d2
00001E10  4283                    1398      clr.l   d3
00001E12  4284                    1399      clr.l   d4
00001E14                          1400      
00001E14  2A28 000A               1401      move.l  BOX_S_Y(a0), d5
00001E18  E085                    1402      asr.l   #8, d5
00001E1A                          1403      
00001E1A  7054                    1404      move.l  #DRAW_LINE_FROM_TO, d0
00001E1C  3228 000E               1405      move.w  BOX_X1(a0), d1
00001E20  D268 0008               1406      add.w   BOX_S_X(a0), d1
00001E24                          1407      
00001E24  3428 0010               1408      move.w  BOX_Y1(a0), d2
00001E28  D445                    1409      add.w   d5, d2
00001E2A                          1410      
00001E2A  3628 0012               1411      move.w  BOX_X2(a0), d3
00001E2E  D668 0008               1412      add.w   BOX_S_X(a0), d3
00001E32                          1413      
00001E32  3828 0014               1414      move.w  BOX_Y2(a0), d4
00001E36  D845                    1415      add.w   d5, d4
00001E38                          1416      
00001E38  4E4F                    1417      trap    #15
00001E3A                          1418      
00001E3A  7055                    1419      move.l  #DRAW_LINE_TO, d0
00001E3C  3228 001A               1420      move.w  BOX_X4(a0), d1
00001E40  D268 0008               1421      add.w   BOX_S_X(a0), d1
00001E44                          1422      
00001E44  3428 001C               1423      move.w  BOX_Y4(a0), d2
00001E48  D445                    1424      add.w   d5, d2
00001E4A                          1425      
00001E4A  4E4F                    1426      trap    #15
00001E4C                          1427      
00001E4C  3228 0016               1428      move.w  BOX_X3(a0), d1
00001E50  D268 0008               1429      add.w   BOX_S_X(a0), d1
00001E54                          1430      
00001E54  3428 0018               1431      move.w  BOX_Y3(a0), d2
00001E58  D445                    1432      add.w   d5, d2
00001E5A                          1433      
00001E5A  4E4F                    1434      trap    #15
00001E5C                          1435      
00001E5C  3228 000E               1436      move.w  BOX_X1(a0), d1
00001E60  D268 0008               1437      add.w   BOX_S_X(a0), d1
00001E64                          1438      
00001E64  3428 0010               1439      move.w  BOX_Y1(a0), d2
00001E68  D445                    1440      add.w   d5, d2
00001E6A                          1441      
00001E6A  4E4F                    1442      trap    #15
00001E6C                          1443      
00001E6C  103C 005D               1444      move.b  #SET_PEN_WIDTH, d0
00001E70  123C 0001               1445      move.b  #1, d1
00001E74  4E4F                    1446      trap    #15
00001E76  4E75                    1447      rts
00001E78                          1448  
00001E78                          1449  
00001E78= 00000001                1450  IS_ENABLED_INIT     dc.l 1 
00001E7C= 00000000                1451  BOX_TYPE_INIT       dc.l 0
00001E80                          1452  
00001E80= 0140                    1453  BOX_S_X_INIT        dc.w SCREEN_WIDTH/2
00001E82= 00000000                1454  BOX_S_Y_INIT        dc.l 0<<8 
00001E86                          1455  
00001E86= 0001                    1456  BOX_ANG_INIT        dc.w 1 
00001E88= 00000010                1457  BOX_ANG_FP_INIT     dc.l 1<<4 
00001E8C= 00000000                1458  BOX_Y_VEL_INIT      dc.l 0 
00001E90= 0A                      1459  BOX_WIDTH_INIT      dc.b 10 
00001E91= 00                      1460  BOX_FILLER_INIT     dc.b 0 
00001E92                          1461  
00001E92                          1462  
00001E92                          1463  
00001E92                          1464  
00001E92                          1465  
00001E92                          1466  
00001E92                          1467  
00001E92                          1468  
00001E92                          1469  
00001E92                          1470  
00001E92                          1471  
00001E92                          1472  
00001E92                          1473  
00001E92                          1474  
00001E92                          1475  
00001E92                          1476  
00001E92                          1477  
00001E92                          1478  
00001E92                          1479  
00001E92                          1480  
00001E92                          1481  
00001E92                          1482  
00001E92                          1483  
00001E92                          1484  
00001E92                          1485  
00001E92                          1486  
00001E92                          1487  
00001E92                          1488  
00001E92                          1489  
00001E92                          1490  
00001E92                          1491  
00001E92                          1492  
00001E92                          1493  
00001E92                          1494  
00001E92                          1495  
00001E92                          1496  -------------------- end include --------------------
00001E92                          1497      INCLUDE "CrossObstacle.x68"
00001E92                          1498  
00001E92                          1499  
00001E92                          1500  
00001E92                          1501  
00001E92  =0000005F               1502  MIN_CROSS_HALF       EQU  95
00001E92  =00000069               1503  MAX_CROSS_HALF       EQU  105
00001E92                          1504  
00001E92                          1505  
00001E92                          1506  
00001E92                          1507  
00001E92                          1508  
00001E92                          1509  SpawnCross:
00001E92                          1510      *SPAWNS A CROSS AT THE GIVEN POSITION AND AT THE GIVEN MEMORY LOCATION*
00001E92  2F00                    1511      move.l  d0, -(sp)
00001E94  2F01                    1512      move.l  d1, -(sp)
00001E96                          1513      
00001E96  2F3C 00000069           1514      move.l  #MAX_CROSS_HALF, -(sp)
00001E9C  2F3C 0000005F           1515      move.l  #MIN_CROSS_HALF, -(sp)
00001EA2                          1516      
00001EA2  4EB9 00002978           1517      jsr     GetWordInRangeToD6              ;get random size
00001EA8                          1518      
00001EA8  508F                    1519      add.l   #8, sp
00001EAA  221F                    1520      move.l  (sp)+, d1
00001EAC  201F                    1521      move.l  (sp)+, d0
00001EAE                          1522      
00001EAE  3146 003A               1523      move.w  d6, BOX_SIDE_HALF(a0)           ;use it to set up the cross
00001EB2  4EB8 1B78               1524      jsr     SetBoxParams                    ;overloading the box params function here for cross
00001EB6                          1525   
00001EB6  217C 00000001 0004      1526      move.l  #1, ITEM_TYPE(a0)               ;but making type cross for main to identify and call update correctly
00001EBE  1C28 0039               1527      move.b  DIRECTION(a0), d6
00001EC2  7A28                    1528      move.l  #40, d5
00001EC4  0828 0000 0039          1529      btst    #0, DIRECTION(a0)
00001ECA  6700 0008               1530      beq     AddOffset
00001ECE  9B68 0008               1531      sub.w   d5, BOX_S_X(a0)
00001ED2  4E75                    1532      rts
00001ED4                          1533  AddOffset
00001ED4  DB68 0008               1534      add.w   d5, BOX_S_X(a0)
00001ED8  4E75                    1535      rts
00001EDA                          1536      
00001EDA                          1537      
00001EDA                          1538  UpdateCross:
00001EDA                          1539      *CHANGES ROTATION, POSITION AND VELOCITY OF CROSS AND REDRAWS*
00001EDA  2028 0030               1540      move.l  BOX_ANG_FP(a0), d0
00001EDE  4283                    1541      clr.l   d3
00001EE0                          1542      
00001EE0  3639 00002C4C           1543      move.w  (DELTA_TIME), d3
00001EE6                          1544      
00001EE6  C6FC 000F               1545      mulu    #15, d3
00001EEA  1828 0039               1546      move.b  DIRECTION(a0), d4
00001EEE  0804 0000               1547      btst    #0, d4
00001EF2  6700 0004               1548      beq     NormalCrossRotation
00001EF6  4483                    1549      neg.l   d3                              ;reverse rotation
00001EF8                          1550  NormalCrossRotation
00001EF8  D083                    1551      add.l   d3, d0                          ;get new rotation
00001EFA  2200                    1552      move.l  d0, d1
00001EFC  E681                    1553      asr.l   #3, d1
00001EFE  B27C 0168               1554      cmp.w   #360, d1
00001F02  6D00 000C               1555      blt     CheckCrossNeg
00001F06  0441 0168               1556      sub.w   #360, d1
00001F0A  0480 00000B40           1557      sub.l   #360<<3, d0
00001F10                          1558  CheckCrossNeg
00001F10  B27C 0000               1559      cmp.w   #0, d1
00001F14  6C00 000C               1560      bge     ResumeCrossRot
00001F18  0641 0168               1561      add.w   #360, d1
00001F1C  0680 00000B40           1562      add.l   #360<<3, d0
00001F22                          1563  ResumeCrossRot
00001F22  3141 002E               1564      move.w  d1, BOX_ANG(a0) 
00001F26  2140 0030               1565      move.l  d0, BOX_ANG_FP(a0)
00001F2A  4EB9 000020AE           1566      jsr     ClearCross                      ;clear previous cross
00001F30                          1567      
00001F30                          1568      *ROTATION PHASE*
00001F30                          1569      
00001F30  103C 005D               1570      move.b  #SET_PEN_WIDTH, d0
00001F34  1228 0038               1571      move.b  BOX_WIDTH(a0), d1
00001F38  4E4F                    1572      trap    #15
00001F3A                          1573      
00001F3A  5D8F                    1574      sub.l   #6, sp
00001F3C                          1575      
00001F3C  3F68 002E 0000          1576      move.w  BOX_ANG(a0), ROT_ANGLE(sp)
00001F42  3F68 001E 0002          1577      move.w  BOX_X1_O(a0), ROT_LINE_X(sp)
00001F48  3F68 0020 0004          1578      move.w  BOX_Y1_O(a0), ROT_LINE_Y(sp)
00001F4E                          1579      
00001F4E  2248                    1580      move.l  a0, a1
00001F50                          1581      
00001F50  4EB9 0000263E           1582      jsr     RotatePoint                     ;rotating first point
00001F56                          1583      
00001F56  2049                    1584      move.l  a1, a0
00001F58                          1585      
00001F58  316F 0002 000E          1586      move.w  ROT_LINE_X(sp), BOX_X1(a0)
00001F5E  316F 0004 0010          1587      move.w  ROT_LINE_Y(sp), BOX_Y1(a0)      ;saving rotated values
00001F64                          1588      
00001F64  3F68 0022 0002          1589      move.w  BOX_X2_O(a0), ROT_LINE_X(sp)
00001F6A  3F68 0024 0004          1590      move.w  BOX_Y2_O(a0), ROT_LINE_Y(sp)
00001F70                          1591      
00001F70  4EB9 0000263E           1592      jsr     RotatePoint                     ;rotating second point
00001F76                          1593  
00001F76                          1594      
00001F76  2049                    1595      move.l  a1, a0
00001F78                          1596      
00001F78  316F 0002 0012          1597      move.w  ROT_LINE_X(sp), BOX_X2(a0)
00001F7E  316F 0004 0014          1598      move.w  ROT_LINE_Y(sp), BOX_Y2(a0)      ;saving rotated values
00001F84                          1599    
00001F84  3F68 0026 0002          1600      move.w  BOX_X3_O(a0), ROT_LINE_X(sp)
00001F8A  3F68 0028 0004          1601      move.w  BOX_Y3_O(a0), ROT_LINE_Y(sp)    
00001F90                          1602  
00001F90                          1603      
00001F90  4EB9 0000263E           1604      jsr     RotatePoint                     ;rotating third point
00001F96                          1605  
00001F96                          1606      
00001F96  2049                    1607      move.l  a1, a0    
00001F98                          1608      
00001F98  316F 0002 0016          1609      move.w  ROT_LINE_X(sp), BOX_X3(a0)
00001F9E  316F 0004 0018          1610      move.w  ROT_LINE_Y(sp), BOX_Y3(a0)
00001FA4                          1611  
00001FA4  3F68 002A 0002          1612      move.w  BOX_X4_O(a0), ROT_LINE_X(sp)
00001FAA  3F68 002C 0004          1613      move.w  BOX_Y4_O(a0), ROT_LINE_Y(sp)    ;saving rotated values
00001FB0                          1614  
00001FB0                          1615      
00001FB0  4EB9 0000263E           1616      jsr     RotatePoint                     ;rotating fourth point
00001FB6                          1617  
00001FB6                          1618      
00001FB6  2049                    1619      move.l  a1, a0    
00001FB8                          1620      
00001FB8  316F 0002 001A          1621      move.w  ROT_LINE_X(sp), BOX_X4(a0)
00001FBE  316F 0004 001C          1622      move.w  ROT_LINE_Y(sp), BOX_Y4(a0)      ;saving rotated values
00001FC4                          1623  
00001FC4                          1624      
00001FC4  5C8F                    1625      add.l   #6, sp
00001FC6                          1626      
00001FC6  0839 0000 00002C46      1627      btst    #0, ABOVE_MID                   ;check if box needs to scroll
00001FCE  6700 0034               1628      beq     SkipCrossVelocity
00001FD2                          1629      
00001FD2                          1630      *VELOCITY PHASE*
00001FD2                          1631      
00001FD2  2028 000A               1632      move.l  BOX_S_Y(a0), d0             
00001FD6  2239 00002C36           1633      move.l  BALL_Y_VEL, d1
00001FDC  C3F9 00002C4C           1634      muls    (DELTA_TIME), d1
00001FE2                          1635       
00001FE2  2401                    1636      move.l  d1, d2
00001FE4                          1637       
00001FE4  E482                    1638      asr.l   #2, d2                          ;d2 = velocity * delta_time * 0.1
00001FE6                          1639       
00001FE6  D282                    1640      add.l   d2, d1                          ;d1 = 1.1 * velocity * delta_time
00001FE8                          1641       
00001FE8  9081                    1642      sub.l   d1, d0                          ;update position
00001FEA                          1643       
00001FEA  2140 000A               1644      move.l  d0, BOX_S_Y(a0)
00001FEE                          1645      
00001FEE                          1646      *DESTROY CHECK*
00001FEE  2A3C 0001E000           1647      move.l  #SCREEN_HEIGHT<<8, d5
00001FF4  0685 0000A000           1648      add.l   #DISTANCE_BELOW_BOTTOM_TO_KILL, d5
00001FFA  B085                    1649      cmp.l   d5, d0                         ;if position is below the bottom, delete cross
00001FFC  6D00 0006               1650      blt     SkipCrossVelocity
00002000  4EB8 1DE8               1651      jsr     DeleteBox     
00002004                          1652       
00002004                          1653  SkipCrossVelocity
00002004                          1654  
00002004                          1655      *DRAWING PHASE - CROSS IS DRAWN AS FOUR LINES OF DIFFERENT COLORS*
00002004                          1656      
00002004  43F9 000FD0F6           1657      lea COLOR_ARRAY, a1
0000200A                          1658      
0000200A  7050                    1659      move.l  #SET_PEN_COLOR, d0
0000200C  2211                    1660      move.l  (a1), d1
0000200E                          1661      
0000200E  4E4F                    1662      trap    #15 
00002010                          1663      
00002010  7054                    1664      move.l  #DRAW_LINE_FROM_TO, d0
00002012  4281                    1665      clr.l   d1
00002014  4282                    1666      clr.l   d2
00002016  4283                    1667      clr.l   d3
00002018  2A28 000A               1668      move.l  BOX_S_Y(a0), d5
0000201C  E085                    1669      asr.l   #8, d5
0000201E                          1670      
0000201E  3228 0008               1671      move.w  BOX_S_X(a0), d1
00002022                          1672      
00002022  3405                    1673      move.w  d5, d2
00002024                          1674      
00002024  3628 000E               1675      move.w  BOX_X1(a0), d3
00002028  D668 0008               1676      add.w   BOX_S_X(a0), d3
0000202C                          1677      
0000202C  3828 0010               1678      move.w  BOX_Y1(a0), d4
00002030  D845                    1679      add.w   d5, d4
00002032                          1680      
00002032  4E4F                    1681      trap    #15
00002034                          1682      
00002034  7050                    1683      move.l  #SET_PEN_COLOR, d0
00002036  2229 0004               1684      move.l  4(a1), d1
0000203A  4E4F                    1685      trap    #15 
0000203C                          1686      
0000203C  7054                    1687      move.l  #DRAW_LINE_FROM_TO, d0
0000203E                          1688  
0000203E  4281                    1689      clr.l   d1
00002040  4282                    1690      clr.l   d2
00002042  4283                    1691      clr.l   d3
00002044                          1692      
00002044  3228 0008               1693      move.w  BOX_S_X(a0), d1
00002048                          1694      
00002048  3405                    1695      move.w  d5, d2
0000204A                          1696  
0000204A  3628 0012               1697      move.w  BOX_X2(a0), d3
0000204E  D668 0008               1698      add.w   BOX_S_X(a0), d3
00002052                          1699      
00002052  3828 0014               1700      move.w  BOX_Y2(a0), d4
00002056  D845                    1701      add.w   d5, d4
00002058                          1702  
00002058                          1703      
00002058  4E4F                    1704      trap    #15
0000205A                          1705      
0000205A  7050                    1706      move.l  #SET_PEN_COLOR, d0
0000205C  2229 0008               1707      move.l  8(a1), d1
00002060  4E4F                    1708      trap    #15 
00002062                          1709      
00002062  7054                    1710      move.l  #DRAW_LINE_FROM_TO, d0
00002064                          1711  
00002064  4281                    1712      clr.l   d1
00002066  4282                    1713      clr.l   d2
00002068                          1714      
00002068  3228 0008               1715      move.w  BOX_S_X(a0), d1
0000206C                          1716      
0000206C  3405                    1717      move.w  d5, d2
0000206E                          1718  
0000206E  3628 0016               1719      move.w  BOX_X3(a0), d3
00002072  D668 0008               1720      add.w   BOX_S_X(a0), d3
00002076                          1721      
00002076  3828 0018               1722      move.w  BOX_Y3(a0), d4
0000207A  D845                    1723      add.w   d5, d4
0000207C                          1724  
0000207C                          1725  
0000207C  4E4F                    1726      trap    #15
0000207E                          1727      
0000207E  7050                    1728      move.l  #SET_PEN_COLOR, d0
00002080  2229 000C               1729      move.l  12(a1), d1
00002084                          1730      
00002084  4E4F                    1731      trap    #15 
00002086                          1732      
00002086                          1733      
00002086  7054                    1734      move.l  #DRAW_LINE_FROM_TO, d0
00002088                          1735  
00002088  4282                    1736      clr.l   d2
0000208A  4281                    1737      clr.l   d1
0000208C                          1738      
0000208C  3228 0008               1739      move.w  BOX_S_X(a0), d1
00002090                          1740      
00002090  3405                    1741      move.w  d5, d2
00002092                          1742  
00002092  3628 001A               1743      move.w  BOX_X4(a0), d3
00002096  D668 0008               1744      add.w   BOX_S_X(a0), d3
0000209A                          1745      
0000209A  3828 001C               1746      move.w  BOX_Y4(a0), d4
0000209E  D845                    1747      add.w   d5, d4
000020A0                          1748  
000020A0                          1749      
000020A0  4E4F                    1750      trap    #15
000020A2                          1751  
000020A2                          1752  
000020A2  103C 005D               1753      move.b  #SET_PEN_WIDTH, d0
000020A6  123C 0001               1754      move.b  #1, d1
000020AA  4E4F                    1755      trap    #15
000020AC  4E75                    1756      rts
000020AE                          1757      
000020AE                          1758      
000020AE                          1759  ClearCross:
000020AE                          1760      *CLEARS THE PREVIOUS DRAW OF THE BOX ON SCREEN BY DRAWING FOUR LINES*
000020AE  103C 005D               1761      move.b  #SET_PEN_WIDTH, d0
000020B2  1228 0038               1762      move.b  BOX_WIDTH(a0), d1
000020B6  4E4F                    1763      trap    #15
000020B8  7050                    1764      move.l  #SET_PEN_COLOR, d0
000020BA  2239 00002C42           1765      move.l  NEUTRAL_COLOR, d1
000020C0  4E4F                    1766      trap    #15 
000020C2  4281                    1767      clr.l   d1
000020C4  4282                    1768      clr.l   d2
000020C6  4283                    1769      clr.l   d3
000020C8  4284                    1770      clr.l   d4
000020CA                          1771      
000020CA  2A28 000A               1772      move.l  BOX_S_Y(a0), d5
000020CE  E085                    1773      asr.l   #8, d5
000020D0                          1774      
000020D0  7054                    1775      move.l  #DRAW_LINE_FROM_TO, d0
000020D2                          1776      
000020D2  3228 0008               1777      move.w   BOX_S_X(a0), d1
000020D6                          1778      
000020D6  3405                    1779      move.w  d5, d2
000020D8                          1780      
000020D8  3628 000E               1781      move.w  BOX_X1(a0), d3
000020DC  D668 0008               1782      add.w   BOX_S_X(a0), d3
000020E0                          1783      
000020E0  3828 0010               1784      move.w  BOX_Y1(a0), d4
000020E4  D845                    1785      add.w   d5, d4
000020E6                          1786      
000020E6  4E4F                    1787      trap    #15
000020E8                          1788  
000020E8  3628 0012               1789      move.w  BOX_X2(a0), d3
000020EC  D668 0008               1790      add.w   BOX_S_X(a0), d3
000020F0                          1791      
000020F0  3828 0014               1792      move.w  BOX_Y2(a0), d4
000020F4  D845                    1793      add.w   d5, d4
000020F6  4E4F                    1794      trap    #15
000020F8                          1795      
000020F8  3628 0016               1796      move.w  BOX_X3(a0), d3
000020FC  D668 0008               1797      add.w   BOX_S_X(a0), d3
00002100                          1798      
00002100  3828 0018               1799      move.w  BOX_Y3(a0), d4
00002104  D845                    1800      add.w   d5, d4
00002106                          1801  
00002106  4E4F                    1802      trap    #15
00002108                          1803      
00002108  3628 001A               1804      move.w  BOX_X4(a0), d3
0000210C  D668 0008               1805      add.w   BOX_S_X(a0), d3
00002110                          1806      
00002110  3828 001C               1807      move.w  BOX_Y4(a0), d4
00002114  D845                    1808      add.w   d5, d4
00002116                          1809    
00002116  4E4F                    1810      trap    #15
00002118                          1811      
00002118  103C 005D               1812      move.b  #SET_PEN_WIDTH, d0
0000211C  123C 0001               1813      move.b  #1, d1
00002120  4E4F                    1814      trap    #15
00002122                          1815      
00002122  4E75                    1816      rts
00002124                          1817  
00002124                          1818  
00002124                          1819  
00002124                          1820  
00002124                          1821  
00002124                          1822  
00002124                          1823  
00002124                          1824  
00002124                          1825  
00002124                          1826  
00002124                          1827  
00002124                          1828  
00002124                          1829  
00002124                          1830  
00002124                          1831  
00002124                          1832  
00002124                          1833  
00002124                          1834  
00002124                          1835  
00002124                          1836  
00002124                          1837  
00002124                          1838  
00002124                          1839  
00002124                          1840  
00002124                          1841  
00002124                          1842  
00002124                          1843  
00002124                          1844  
00002124                          1845  
00002124                          1846  
00002124                          1847  
00002124                          1848  
00002124                          1849  
00002124                          1850  
00002124                          1851  
00002124                          1852  
00002124                          1853  
00002124                          1854  
00002124                          1855  
00002124                          1856  
00002124                          1857  
00002124                          1858  
00002124                          1859  
00002124                          1860  
00002124                          1861  
00002124                          1862  
00002124                          1863  
00002124                          1864  
00002124                          1865  
00002124                          1866  
00002124                          1867  
00002124                          1868  
00002124                          1869  
00002124                          1870  
00002124                          1871  
00002124                          1872  
00002124                          1873  
00002124                          1874  -------------------- end include --------------------
00002124                          1875      INCLUDE "TriangleObstacle.x68"
00002124                          1876  
00002124                          1877  
00002124                          1878  
00002124  =0000001A               1879  COLOR_1              EQU  26
00002124  =0000002A               1880  COLOR_2              EQU  42
00002124  =0000003C               1881  COLOR_3              EQU  60
00002124  =00000040               1882  TRIANGLE_CLASS_SIZE  EQU  64
00002124                          1883  
00002124  =0000005F               1884  MIN_TRIANGLE_HALF    EQU  95
00002124  =00000073               1885  MAX_TRIANGLE_HALF    EQU  115
00002124                          1886  
00002124                          1887  
00002124                          1888  
00002124                          1889  
00002124                          1890  
00002124                          1891  SpawnTriangle:
00002124                          1892      *SPAWNS A TRIANGLE AT THE GIVEN POSITION AND AT THE GIVEN MEMORY LOCATION*
00002124  2F00                    1893      move.l  d0, -(sp)
00002126  2F01                    1894      move.l  d1, -(sp)
00002128                          1895      
00002128  2F3C 00000073           1896      move.l  #MAX_TRIANGLE_HALF, -(sp)
0000212E  2F3C 0000005F           1897      move.l  #MIN_TRIANGLE_HALF, -(sp)
00002134                          1898      
00002134  4EB9 00002978           1899      jsr     GetWordInRangeToD6              ;get random size
0000213A                          1900      
0000213A  508F                    1901      add.l   #8, sp
0000213C  221F                    1902      move.l  (sp)+, d1
0000213E  201F                    1903      move.l  (sp)+, d0
00002140                          1904      
00002140  3146 003A               1905      move.w  d6, BOX_SIDE_HALF(a0)           ;use it to set up the triangle 
00002144  4EB9 0000214C           1906      jsr     SetTriangleParams
0000214A  4E75                    1907      rts
0000214C                          1908      
0000214C                          1909  SetTriangleParams:
0000214C  2178 1E78 0000          1910      move.l  IS_ENABLED_INIT, IS_ENABLED(a0)         ;make the triangle enabled
00002152  2179 0000248A 0004      1911      move.l  TRIANGLE_TYPE_INIT, ITEM_TYPE(a0)       ;item type is triangle 
0000215A                          1912      
0000215A  3140 0008               1913      move.w  d0, BOX_S_X(a0)
0000215E  2141 000A               1914      move.l  d1, BOX_S_Y(a0)
00002162                          1915      
00002162  3828 003A               1916      move.w  BOX_SIDE_HALF(a0), d4           ;+half-width
00002166  3A04                    1917      move.w  d4, d5
00002168  4445                    1918      neg.w   d5                              ;-half-width
0000216A                          1919      
0000216A  48E7 FFFE               1920      movem.l ALL_REGS, -(sp)
0000216E                          1921      
0000216E  33FC 003C 0000263C      1922      move.w  #60, ANGLE  
00002176  4EB9 000026A4           1923      jsr     GetSinAtD7                      ;getting sine 60 at d7
0000217C                          1924      
0000217C  33C7 00002492           1925      move.w  d7, TEMP_SINE                   ;storing it away in temp_sine
00002182                          1926      
00002182  4CDF 7FFF               1927      movem.l (sp)+, ALL_REGS
00002186                          1928      
00002186  3C04                    1929      move.w  d4, d6                          ;half-width
00002188                          1930      
00002188  CCF9 00002492           1931      mulu    TEMP_SINE, d6                   ;h/2 = a/2 * sin60 (equilateral triangle)
0000218E                          1932      
0000218E  E086                    1933      asr.l   #8, d6  
00002190  EC86                    1934      asr.l   #6, d6                          ;bring h/2  to 2^0 from 2^-14 form (sine was in 2^-14)
00002192                          1935      
00002192  3E06                    1936      move.w  d6, d7                          ;d7 = +h/2
00002194                          1937      
00002194  4446                    1938      neg.w   d6                              ;d6 = -h/2
00002196                          1939      
00002196  317C 0000 001E          1940      move.w  #0, BOX_X1_O(a0)
0000219C  3146 0020               1941      move.w  d6, BOX_Y1_O(a0)                ;0, -h/2 (top point)
000021A0                          1942      
000021A0  3145 0022               1943      move.w  d5, BOX_X2_O(a0)
000021A4  3147 0024               1944      move.w  d7, BOX_Y2_O(a0)                ;-a/2, h/2 (bottom left)
000021A8                          1945      
000021A8  3144 0026               1946      move.w  d4, BOX_X3_O(a0)
000021AC  3147 0028               1947      move.w  d7, BOX_Y3_O(a0)                ;a/2, h/2 (bottom right)
000021B0                          1948      
000021B0  2F3C 0000002D           1949      move.l  #45, -(sp)
000021B6  2F3C 00000000           1950      move.l  #0, -(sp)
000021BC  4EB9 00002978           1951      jsr     GetWordInRangeToD6              ;get an angle from 0-45 degrees
000021C2  CCBC 0000FFFF           1952      and.l   #$0000ffff, d6
000021C8  508F                    1953      add.l   #8, sp
000021CA  E786                    1954      asl.l   #3, d6                          ;multiply by 8 to get an angle out of 360
000021CC  3146 002E               1955      move.w  d6, BOX_ANG(a0)
000021D0                          1956      
000021D0  E986                    1957      asl.l   #4, d6
000021D2  2146 0030               1958      move.l  d6, BOX_ANG_FP(a0)              ;floating point version of angle
000021D6                          1959      
000021D6  2178 1E8C 0034          1960      move.l  BOX_Y_VEL_INIT, BOX_Y_VEL(a0)   
000021DC                          1961      
000021DC                          1962      *SET COLORS CAREFULLY
000021DC                          1963      
000021DC  48E7 FFFE               1964      movem.l ALL_REGS, -(sp)
000021E0                          1965      
000021E0  4EB9 000029A6           1966      jsr     GetRandomColorInD6              ;get one color that has to be there
000021E6  23C6 0000248E           1967      move.l  d6, TEMP_COLOR_STORAGE
000021EC                          1968      
000021EC  4CDF 7FFF               1969      movem.l (sp)+, ALL_REGS  
000021F0                          1970      
000021F0  2C39 0000248E           1971      move.l  TEMP_COLOR_STORAGE, d6  
000021F6                          1972      
000021F6  23FC 00000001 00002A36  1973      move.l  #1, ALREADY_SET                 ;set so that the switcher that spawns below this will grab this color
00002200  23C6 00002A3A           1974      move.l  d6, SET_COLOR    
00002206  2146 001A               1975      move.l  d6, COLOR_1(a0)
0000220A                          1976      
0000220A  45F9 000FD0F6           1977      lea     COLOR_ARRAY, a2
00002210  7800                    1978      move.l  #0, d4
00002212                          1979  FindColorLoop
00002212                          1980      *loop to find the chosen color in the color array*
00002212  B8BC 00000004           1981      cmp.l   #4, d4
00002218  6700 0012               1982      beq     AfterFindColorLoop
0000221C  2A04                    1983      move.l  d4, d5
0000221E  E585                    1984      asl.l   #2, d5
00002220  BCB2 5000               1985      cmp.l   (a2, d5), d6
00002224  6700 0006               1986      beq     AfterFindColorLoop
00002228  5284                    1987      addq.l  #1, d4
0000222A  60E6                    1988      bra.s   FindColorLoop
0000222C                          1989  AfterFindColorLoop
0000222C                          1990  
0000222C                          1991      *choose two more colors for the triangle relative to the current color*
0000222C                          1992  FirstColor
0000222C  2A04                    1993      move.l  d4, d5
0000222E  5385                    1994      subq.l  #1, d5
00002230  BABC 00000000           1995      cmp.l   #0, d5
00002236  6C00 0004               1996      bge     SecondColor
0000223A  7A03                    1997      move.l  #3, d5
0000223C                          1998  SecondColor
0000223C  2605                    1999      move.l  d5, d3
0000223E  5383                    2000      subq.l  #1, d3
00002240  B6BC 00000000           2001      cmp.l   #0, d3
00002246  6C00 0004               2002      bge     AfterSecondColor
0000224A  7603                    2003      move.l  #3, d3
0000224C                          2004  AfterSecondColor
0000224C  E585                    2005      asl.l   #2, d5
0000224E  2172 5000 002A          2006      move.l  (a2, d5), COLOR_2(a0)
00002254  E583                    2007      asl.l   #2, d3
00002256  2172 3000 003C          2008      move.l  (a2, d3), COLOR_3(a0)
0000225C                          2009      
0000225C                          2010      *DONE SETTING COLORS*
0000225C                          2011      
0000225C  2F3C 0000000C           2012      move.l  #MAX_BOX_WIDTH, -(sp)
00002262  2F3C 00000009           2013      move.l  #MIN_BOX_WIDTH, -(sp)
00002268  4EB9 00002978           2014      jsr     GetWordInRangeToD6              ;get a width in the given range
0000226E  508F                    2015      addq.l  #8, sp
00002270                          2016      
00002270  1146 0038               2017      move.b  d6, BOX_WIDTH(a0)
00002274                          2018      
00002274                          2019      *randomize spin*
00002274  4EB9 0000299A           2020      jsr     GetRandomByteToD6
0000227A  0806 0002               2021      btst    #2, d6
0000227E  6600 000A               2022      bne     ReverseTriangleSpin
00002282  117C 0000 0039          2023      move.b  #0, DIRECTION(a0)                  
00002288  4E75                    2024      rts
0000228A                          2025  ReverseTriangleSpin
0000228A  117C 0001 0039          2026      move.b  #1, DIRECTION(a0)
00002290  4E75                    2027      rts
00002292                          2028      
00002292                          2029  UpdateTriangle:
00002292                          2030      *CHANGES ROTATION, POSITION AND VELOCITY OF TRIANGLE AND REDRAWS*
00002292  2028 0030               2031      move.l  BOX_ANG_FP(a0), d0
00002296  4283                    2032      clr.l   d3
00002298                          2033      
00002298  3639 00002C4C           2034      move.w  (DELTA_TIME), d3
0000229E                          2035      
0000229E  C6FC 000A               2036      mulu    #10, d3
000022A2  1828 0039               2037      move.b  DIRECTION(a0), d4
000022A6  0804 0000               2038      btst    #0, d4
000022AA  6700 0004               2039      beq     NormalTriangleRotation
000022AE  4483                    2040      neg.l   d3                              ;reverse rotation
000022B0                          2041  NormalTriangleRotation
000022B0  D083                    2042      add.l   d3, d0                          ;get new rotation
000022B2  2200                    2043      move.l  d0, d1
000022B4  E681                    2044      asr.l   #3, d1
000022B6  B27C 0168               2045      cmp.w   #360, d1
000022BA  6D00 000C               2046      blt     CheckTriangleNeg
000022BE  0441 0168               2047      sub.w   #360, d1
000022C2  0480 00000B40           2048      sub.l   #360<<3, d0
000022C8                          2049  CheckTriangleNeg
000022C8  B27C 0000               2050      cmp.w   #0, d1
000022CC  6C00 000C               2051      bge     ResumeTriangleRot
000022D0  0641 0168               2052      add.w   #360, d1
000022D4  0680 00000B40           2053      add.l   #360<<3, d0
000022DA                          2054  ResumeTriangleRot
000022DA  3141 002E               2055      move.w  d1, BOX_ANG(a0) 
000022DE  2140 0030               2056      move.l  d0, BOX_ANG_FP(a0)
000022E2  4EB9 0000241A           2057      jsr     ClearTriangle                   ;clear previous box
000022E8                          2058      *ROTATION PHASE*
000022E8                          2059      
000022E8  103C 005D               2060      move.b  #SET_PEN_WIDTH, d0
000022EC  1228 0038               2061      move.b  BOX_WIDTH(a0), d1
000022F0  4E4F                    2062      trap    #15
000022F2                          2063      
000022F2  5D8F                    2064      sub.l   #6, sp
000022F4                          2065      
000022F4  3F68 002E 0000          2066      move.w  BOX_ANG(a0), ROT_ANGLE(sp)
000022FA  3F68 001E 0002          2067      move.w  BOX_X1_O(a0), ROT_LINE_X(sp)
00002300  3F68 0020 0004          2068      move.w  BOX_Y1_O(a0), ROT_LINE_Y(sp)
00002306                          2069      
00002306  2248                    2070      move.l  a0, a1
00002308                          2071      
00002308  4EB9 0000263E           2072      jsr     RotatePoint                     ;rotating first point
0000230E                          2073      
0000230E  2049                    2074      move.l  a1, a0
00002310                          2075      
00002310  316F 0002 000E          2076      move.w  ROT_LINE_X(sp), BOX_X1(a0)
00002316  316F 0004 0010          2077      move.w  ROT_LINE_Y(sp), BOX_Y1(a0)      ;saving rotated values
0000231C                          2078      
0000231C  3F68 0022 0002          2079      move.w  BOX_X2_O(a0), ROT_LINE_X(sp)
00002322  3F68 0024 0004          2080      move.w  BOX_Y2_O(a0), ROT_LINE_Y(sp)
00002328                          2081      
00002328  4EB9 0000263E           2082      jsr     RotatePoint                     ;rotating second point
0000232E                          2083  
0000232E                          2084      
0000232E  2049                    2085      move.l  a1, a0
00002330                          2086      
00002330  316F 0002 0012          2087      move.w  ROT_LINE_X(sp), BOX_X2(a0)
00002336  316F 0004 0014          2088      move.w  ROT_LINE_Y(sp), BOX_Y2(a0)      ;saving rotated values
0000233C                          2089    
0000233C  3F68 0026 0002          2090      move.w  BOX_X3_O(a0), ROT_LINE_X(sp)
00002342  3F68 0028 0004          2091      move.w  BOX_Y3_O(a0), ROT_LINE_Y(sp)    
00002348                          2092  
00002348                          2093      
00002348  4EB9 0000263E           2094      jsr     RotatePoint                     ;rotating third point
0000234E                          2095  
0000234E                          2096      
0000234E  2049                    2097      move.l  a1, a0    
00002350                          2098      
00002350  316F 0002 0016          2099      move.w  ROT_LINE_X(sp), BOX_X3(a0)
00002356  316F 0004 0018          2100      move.w  ROT_LINE_Y(sp), BOX_Y3(a0)      ;saving rotated values
0000235C                          2101  
0000235C                          2102      
0000235C  5C8F                    2103      add.l   #6, sp
0000235E                          2104      
0000235E  0839 0000 00002C46      2105      btst    #0, ABOVE_MID                   ;check if box needs to scroll
00002366  6700 0034               2106      beq     SkipTriangleVelocity
0000236A                          2107      
0000236A                          2108      *VELOCITY PHASE*
0000236A                          2109      
0000236A  2028 000A               2110       move.l BOX_S_Y(a0), d0             
0000236E  2239 00002C36           2111       move.l BALL_Y_VEL, d1
00002374  C3F9 00002C4C           2112       muls   (DELTA_TIME), d1
0000237A                          2113       
0000237A  2401                    2114       move.l d1, d2
0000237C                          2115       
0000237C  E482                    2116       asr.l  #2, d2                          ;d2 = velocity * delta_time * 0.1
0000237E                          2117       
0000237E  D282                    2118       add.l  d2, d1                          ;d1 = 1.1 * velocity * delta_time
00002380                          2119       
00002380  9081                    2120       sub.l  d1, d0                          ;update position
00002382                          2121       
00002382  2140 000A               2122       move.l d0, BOX_S_Y(a0)
00002386                          2123       
00002386                          2124       *DESTROY CHECK*
00002386  2A3C 0001E000           2125       move.l #SCREEN_HEIGHT<<8, d5
0000238C  0685 0000A000           2126       add.l  #DISTANCE_BELOW_BOTTOM_TO_KILL, d5
00002392  B085                    2127       cmp.l  d5, d0                         ;if position is below the bottom, delete triangle
00002394  6D00 0006               2128       blt    SkipTriangleVelocity
00002398  4EB8 1DE8               2129       jsr    DeleteBox                      ;overloading 
0000239C                          2130       
0000239C                          2131  SkipTriangleVelocity
0000239C                          2132      *DRAWING PHASE - draws a triangle as three lines of different color*
0000239C                          2133      
0000239C  7050                    2134      move.l  #SET_PEN_COLOR, d0
0000239E  2228 001A               2135      move.l  COLOR_1(a0), d1
000023A2                          2136      
000023A2  4E4F                    2137      trap    #15 
000023A4                          2138      
000023A4  7054                    2139      move.l  #DRAW_LINE_FROM_TO, d0
000023A6  4281                    2140      clr.l   d1
000023A8  4282                    2141      clr.l   d2
000023AA  4283                    2142      clr.l   d3
000023AC  2A28 000A               2143      move.l  BOX_S_Y(a0), d5
000023B0  E085                    2144      asr.l   #8, d5
000023B2                          2145      
000023B2  3228 000E               2146      move.w  BOX_X1(a0), d1
000023B6  D268 0008               2147      add.w   BOX_S_X(a0), d1
000023BA                          2148      
000023BA  3428 0010               2149      move.w  BOX_Y1(a0), d2
000023BE  D445                    2150      add.w   d5, d2
000023C0                          2151      
000023C0  3628 0012               2152      move.w  BOX_X2(a0), d3
000023C4  D668 0008               2153      add.w   BOX_S_X(a0), d3
000023C8                          2154      
000023C8  3828 0014               2155      move.w  BOX_Y2(a0), d4
000023CC  D845                    2156      add.w   d5, d4
000023CE                          2157      
000023CE  4E4F                    2158      trap    #15
000023D0                          2159      
000023D0  7050                    2160      move.l  #SET_PEN_COLOR, d0
000023D2  2228 002A               2161      move.l  COLOR_2(a0), d1
000023D6  4E4F                    2162      trap    #15 
000023D8                          2163      
000023D8  4281                    2164      clr.l   d1
000023DA  4282                    2165      clr.l   d2
000023DC  4283                    2166      clr.l   d3
000023DE                          2167      
000023DE  7055                    2168      move.l  #DRAW_LINE_TO, d0
000023E0  3228 0016               2169      move.w  BOX_X3(a0), d1
000023E4  D268 0008               2170      add.w   BOX_S_X(a0), d1
000023E8                          2171      
000023E8  3428 0018               2172      move.w  BOX_Y3(a0), d2
000023EC  D445                    2173      add.w   d5, d2
000023EE                          2174      
000023EE  4E4F                    2175      trap    #15
000023F0                          2176      
000023F0  7050                    2177      move.l  #SET_PEN_COLOR, d0
000023F2  2228 003C               2178      move.l  COLOR_3(a0), d1
000023F6  4E4F                    2179      trap    #15 
000023F8                          2180      
000023F8  4281                    2181      clr.l   d1
000023FA  4282                    2182      clr.l   d2
000023FC                          2183      
000023FC  7055                    2184      move.l  #DRAW_LINE_TO, d0
000023FE                          2185      
000023FE  3228 000E               2186      move.w  BOX_X1(a0), d1
00002402  D268 0008               2187      add.w   BOX_S_X(a0), d1
00002406                          2188      
00002406  3428 0010               2189      move.w  BOX_Y1(a0), d2
0000240A  D445                    2190      add.w   d5, d2
0000240C                          2191  
0000240C  4E4F                    2192      trap    #15
0000240E                          2193  
0000240E  103C 005D               2194      move.b  #SET_PEN_WIDTH, d0
00002412  123C 0001               2195      move.b  #1, d1
00002416  4E4F                    2196      trap    #15
00002418  4E75                    2197      rts
0000241A                          2198      
0000241A                          2199          
0000241A                          2200  ClearTriangle:
0000241A                          2201      *CLEARS THE PREVIOUS DRAW OF THE TRIANGLE ON SCREEN - 3 LINES OF NEUTRAL COLOR*
0000241A  103C 005D               2202      move.b  #SET_PEN_WIDTH, d0
0000241E  1228 0038               2203      move.b  BOX_WIDTH(a0), d1
00002422  4E4F                    2204      trap    #15
00002424  7050                    2205      move.l  #SET_PEN_COLOR, d0
00002426  2239 00002C42           2206      move.l  NEUTRAL_COLOR, d1
0000242C  4E4F                    2207      trap    #15 
0000242E  4281                    2208      clr.l   d1
00002430  4282                    2209      clr.l   d2
00002432  4283                    2210      clr.l   d3
00002434  4284                    2211      clr.l   d4
00002436                          2212      
00002436  2A28 000A               2213      move.l  BOX_S_Y(a0), d5
0000243A  E085                    2214      asr.l   #8, d5
0000243C                          2215      
0000243C  7054                    2216      move.l  #DRAW_LINE_FROM_TO, d0
0000243E  3228 000E               2217      move.w  BOX_X1(a0), d1
00002442  D268 0008               2218      add.w   BOX_S_X(a0), d1
00002446                          2219      
00002446  3428 0010               2220      move.w  BOX_Y1(a0), d2
0000244A  D445                    2221      add.w   d5, d2
0000244C                          2222      
0000244C  3628 0012               2223      move.w  BOX_X2(a0), d3
00002450  D668 0008               2224      add.w   BOX_S_X(a0), d3
00002454                          2225      
00002454  3828 0014               2226      move.w  BOX_Y2(a0), d4
00002458  D845                    2227      add.w   d5, d4
0000245A                          2228      
0000245A  4E4F                    2229      trap    #15
0000245C                          2230      
0000245C  7055                    2231      move.l  #DRAW_LINE_TO, d0
0000245E  3228 0016               2232      move.w  BOX_X3(a0), d1
00002462  D268 0008               2233      add.w   BOX_S_X(a0), d1
00002466                          2234      
00002466  3428 0018               2235      move.w  BOX_Y3(a0), d2
0000246A  D445                    2236      add.w   d5, d2
0000246C                          2237      
0000246C  4E4F                    2238      trap    #15
0000246E                          2239      
0000246E  3228 000E               2240      move.w  BOX_X1(a0), d1
00002472  D268 0008               2241      add.w   BOX_S_X(a0), d1
00002476                          2242      
00002476  3428 0010               2243      move.w  BOX_Y1(a0), d2
0000247A  D445                    2244      add.w   d5, d2
0000247C                          2245      
0000247C  4E4F                    2246      trap    #15
0000247E                          2247      
0000247E                          2248      
0000247E  103C 005D               2249      move.b  #SET_PEN_WIDTH, d0
00002482  123C 0001               2250      move.b  #1, d1
00002486  4E4F                    2251      trap    #15
00002488  4E75                    2252      rts
0000248A                          2253  
0000248A                          2254  
0000248A= 00000002                2255  TRIANGLE_TYPE_INIT       dc.l 2
0000248E                          2256  TEMP_COLOR_STORAGE       ds.l 1
00002492                          2257  TEMP_SINE                ds.w 1
00002494                          2258  
00002494                          2259  
00002494                          2260  
00002494                          2261  
00002494                          2262  
00002494                          2263  
00002494                          2264  
00002494                          2265  
00002494                          2266  
00002494                          2267  
00002494                          2268  
00002494                          2269  
00002494                          2270  
00002494                          2271  
00002494                          2272  
00002494                          2273  
00002494                          2274  
00002494                          2275  
00002494                          2276  
00002494                          2277  
00002494                          2278  
00002494                          2279  
00002494                          2280  
00002494                          2281  
00002494                          2282  
00002494                          2283  
00002494                          2284  
00002494                          2285  
00002494                          2286  
00002494                          2287  
00002494                          2288  
00002494                          2289  
00002494                          2290  
00002494                          2291  
00002494                          2292  
00002494                          2293  
00002494                          2294  
00002494                          2295  
00002494                          2296  
00002494                          2297  
00002494                          2298  
00002494                          2299  
00002494                          2300  
00002494                          2301  
00002494                          2302  
00002494                          2303  
00002494                          2304  
00002494                          2305  
00002494                          2306  
00002494                          2307  
00002494                          2308  -------------------- end include --------------------
00002494                          2309      INCLUDE "Bitmap.x68"
00002494                          2310  
00002494                          2311  ;universal stuff
00002494  =00000050               2312  PaintColorTrapCode              EQU 80
00002494  =00000052               2313  DrawPixelTrapCode               EQU 82
00002494                          2314  
00002494                          2315  
00002494                          2316  ;DrawBitmap variables
00002494  =00000000               2317  DrawBitmapAddress               EQU 0
00002494  =00000004               2318  DrawBitmapX                     EQU 4
00002494  =00000008               2319  DrawBitmapY                     EQU 8
00002494  =0000000C               2320  DrawBitmapWidth                 EQU 12
00002494  =00000010               2321  DrawBitmapHeight                EQU 16
00002494  =00000014               2322  DrawBitmapScreenX               EQU 20
00002494  =00000018               2323  DrawBitmapScreenY               EQU 24
00002494  =0000001C               2324  PrintAbsolute                   EQU 28
00002494  =0000000A               2325  BitmapOffsetToPixelOffet        EQU 10
00002494  =00000012               2326  BitmapOffsetToWidth             EQU 18
00002494  =00000016               2327  BitmapOffsetToHeight            EQU 22
00002494  =0000001C               2328  BitmapOffsetToBitsPerPixel      EQU 28
00002494  =0000000E               2329  BitmapOffsetToHeaderSize        EQU 14
00002494                          2330  
00002494                          2331  
00002494                          2332  DrawBitmap:
00002494                          2333  
00002494  4280                    2334      clr.l   d0
00002496  4281                    2335      clr.l   d1
00002498  4282                    2336      clr.l   d2
0000249A  4283                    2337      clr.l   d3
0000249C  4284                    2338      clr.l   d4
0000249E  4285                    2339      clr.l   d5
000024A0  4286                    2340      clr.l   d6
000024A2  4287                    2341      clr.l   d7
000024A4                          2342      
000024A4  588F                    2343      addq.l  #4, sp ;adjusting so variable names can be reused
000024A6  206F 0000               2344      move.l  DrawBitmapAddress(sp), a0 ;contains pointer to file (is also used to traverse the file)
000024AA  2C48                    2345      move.l  a0, a6
000024AC  2028 000E               2346      move.l  BitmapOffsetToHeaderSize(a0), d0
000024B0  E158                    2347      rol.w   #8, d0
000024B2  4840                    2348      swap    d0
000024B4  E158                    2349      rol.w   #8, d0 ;actual header size
000024B6  DDC0                    2350      add.l   d0, a6
000024B8  DDFC 0000000E           2351      add.l   #BitmapOffsetToHeaderSize, a6 ;contains pointer to color table
000024BE                          2352      
000024BE                          2353      *getting image-size into d0, d1
000024BE  2028 0012               2354      move.l  BitmapOffsetToWidth(a0), d0 ;image width in px (little endian)
000024C2  2228 0016               2355      move.l  BitmapOffsetToHeight(a0), d1 ;image height in px (little endian)
000024C6  3628 001C               2356      move.w  BitmapOffsetToBitsPerPixel(a0), d3 ; bits per pixel
000024CA  E158                    2357      rol.w   #8, d0
000024CC  4840                    2358      swap    d0
000024CE  E158                    2359      rol.w   #8, d0 ;actual image width
000024D0                          2360      
000024D0  E159                    2361      rol.w   #8, d1
000024D2  4841                    2362      swap    d1
000024D4  E159                    2363      rol.w   #8, d1 ;actual image height
000024D6                          2364      
000024D6  E15B                    2365      rol.w   #8, d3 ;actual bits per pixel
000024D8                          2366      
000024D8                          2367      *offset to pixel data
000024D8  2E28 000A               2368      move.l  BitmapOffsetToPixelOffet(a0), d7 ;contains pixel offset(little endian) 
000024DC  E15F                    2369      rol.w   #8, d7
000024DE  4847                    2370      swap    d7
000024E0  E15F                    2371      rol.w   #8, d7 ;contains actual offset
000024E2  D1C7                    2372      add.l   d7, a0 ;setting a0 to location of first pixel in bmp (d7 is now free for use)
000024E4                          2373      
000024E4                          2374      *Y counter and Y bound
000024E4  2A6F 0010               2375      move.l  DrawBitmapHeight(sp), a5 ; h
000024E8  240D                    2376      move.l  a5, d2
000024EA  D4AF 0018               2377      add.l   DrawBitmapScreenY(sp), d2 = ScreenY + h
000024EE  0CAF 00000001 001C      2378      cmp.l   #1, PrintAbsolute(sp)
000024F6  6604                    2379      bne.s   SkipAddY
000024F8  D4AF 0008               2380      add.l   DrawBitmapY(sp), d2
000024FC                          2381  SkipAddY
000024FC  528D                    2382      addq.l  #1, a5 ;account for 0th row
000024FE                          2383  
000024FE                          2384  
000024FE                          2385      *X bound and X counter
000024FE  226F 0014               2386      move.l  DrawBitmapScreenX(sp), a1 ;ScreenX
00002502  0CAF 00000001 001C      2387      cmp.l   #1, PrintAbsolute(sp)
0000250A  6604                    2388      bne.s   SkipAddX
0000250C  D3EF 0004               2389      add.l   DrawBitmapX(sp), a1 ;ScreenX + x (Can change to first version discussed in class by adding this line)
00002510                          2390  SkipAddX
00002510  2649                    2391      move.l  a1, a3 ;a3 = ScreenX 
00002512  D3EF 000C               2392      add.l   DrawBitmapWidth(sp), a1 ;ScreenX + w
00002516                          2393      
00002516                          2394      *startXoffset computation
00002516  2E2F 0004               2395      move.l  DrawBitmapX(sp), d7 
0000251A  2C47                    2396      move.l  d7, a6 ;d7 is startXOffset
0000251C  DE8E                    2397      add.l   a6, d7
0000251E  DE8E                    2398      add.l   a6, d7
00002520                          2399  
00002520                          2400      *endXoffset computation
00002520  2C00                    2401      move.l  d0, d6
00002522  9CAF 0004               2402      sub.l   DrawBitmapX(sp), d6
00002526  9CAF 000C               2403      sub.l   DrawBitmapWidth(sp), d6 ;endoffset = (W - (x + w)) 
0000252A  2C46                    2404      move.l  d6, a6
0000252C  DC8E                    2405      add.l   a6, d6
0000252E  DC8E                    2406      add.l   a6, d6 ;endoffset = (W - (x + w))*3
00002530                          2407      
00002530                          2408      *row padding computation
00002530  4244                    2409      clr     d4
00002532  2600                    2410      move.l  d0, d3
00002534  2C43                    2411      move.l  d3, a6
00002536  D68E                    2412      add.l   a6, d3
00002538  D68E                    2413      add.l   a6, d3
0000253A  86FC 0004               2414      divu    #4, d3 ; [R.Q]
0000253E  4843                    2415      swap    d3  ; [Q.R]
00002540  3A03                    2416      move.w  d3, d5 ;remainder
00002542  BABC 00000000           2417      cmp.l   #0, d5
00002548  6700 0006               2418      beq     SkipPad ;padding = 0
0000254C  5884                    2419      addq.l  #4, d4
0000254E  9885                    2420      sub.l   d5,d4 ;padding 
00002550                          2421      
00002550                          2422  SkipPad
00002550  DC84                    2423      add.l   d4, d6 ; endXoffset = (W - (x + w))*3 + padding
00002552                          2424      
00002552                          2425  InitialPointerOffset
00002552  2A00                    2426      move.l  d0, d5 ; d5 = W
00002554  2C45                    2427      move.l  d5, a6
00002556  DA8E                    2428      add.l   a6, d5
00002558  DA8E                    2429      add.l   a6, d5 ; d5 = W*3
0000255A  DA84                    2430      add.l   d4, d5 ; d5 = W*3 + padding (padding can now be overwritten)
0000255C  2801                    2431      move.l  d1, d4
0000255E  98AF 0008               2432      sub.l   DrawBitmapY(sp), d4
00002562  98AF 0010               2433      sub.l   DrawBitmapHeight(sp), d4
00002566  2C45                    2434      move.l  d5, a6 
00002568  CAC4                    2435      mulu    d4, d5
0000256A  D1C5                    2436      add.l   d5, a0 ;setting a0 to the first pixel we need (in file order)
0000256C                          2437      
0000256C  2A0D                    2438      move.l  a5, d5
0000256E                          2439  OuterLoop
0000256E  5385                    2440      subq.l  #1, d5 ; go down a row
00002570  6700 00C6               2441      beq     AfterLoop
00002574  5382                    2442      subq.l  #1, d2
00002576                          2443      *init X Counter
00002576  284B                    2444      move.l  a3, a4 ; ScreenX + X
00002578  2809                    2445      move.l  a1, d4
0000257A  988C                    2446      sub.l   a4, d4
0000257C  E484                    2447      asr.l   #2, d4 ; div by 4
0000257E  5284                    2448      addq.l  #1, d4
00002580  D1C7                    2449      add.l   d7, a0 
00002582  3008                    2450      move    a0, d0
00002584  0800 0000               2451      btst    #0, d0
00002588  6700 001C               2452      beq     Loop
0000258C                          2453  OddBoundary 
0000258C  B9C9                    2454      cmp.l   a1, a4
0000258E  6C00 00A2               2455      bge     AfterInnerLoop
00002592                          2456  
00002592                          2457      *fetching pixel
00002592  4241                    2458      clr.w   d1
00002594  1218                    2459      move.b  (a0)+, d1
00002596  4841                    2460      swap    d1
00002598  3218                    2461      move.w  (a0)+, d1
0000259A                          2462  
0000259A                          2463      *setting color
0000259A  7050                    2464      move.l  #PaintColorTrapCode, d0
0000259C  4E4F                    2465      trap    #15
0000259E                          2466      
0000259E                          2467      *drawing pixel
0000259E  7052                    2468      move.l  #DrawPixelTrapCode, d0
000025A0  320C                    2469      move.w  a4, d1 
000025A2  4E4F                    2470      trap    #15
000025A4  528C                    2471      addq.l  #1, a4
000025A6                          2472  
000025A6                          2473  Loop
000025A6  5384                    2474      subq.l  #1, d4
000025A8  6F52                    2475      ble.s   AfterChunkLoop
000025AA                          2476      *fetching pixel 1
000025AA  2218                    2477      move.l  (a0)+, d1
000025AC  4243                    2478      clr.w   d3
000025AE  1601                    2479      move.b  d1, d3
000025B0  4201                    2480      clr.b   d1
000025B2  E099                    2481      ror.l   #8, d1
000025B4                          2482      *setting color
000025B4  7050                    2483      move.l  #PaintColorTrapCode, d0
000025B6  4E4F                    2484      trap    #15
000025B8                          2485      
000025B8                          2486      *drawing pixel 1
000025B8  7052                    2487      move.l  #DrawPixelTrapCode, d0
000025BA  320C                    2488      move.w  a4, d1 
000025BC  4E4F                    2489      trap    #15
000025BE  528C                    2490      addq.l  #1, a4
000025C0                          2491      *fetching pixel 2
000025C0                          2492  Pixel2
000025C0  3203                    2493      move.w  d3, d1
000025C2  4841                    2494      swap    d1
000025C4  3218                    2495      move.w  (a0)+,d1
000025C6                          2496      *setting color
000025C6  7050                    2497      move.l  #PaintColorTrapCode, d0
000025C8  4E4F                    2498      trap    #15
000025CA                          2499      
000025CA                          2500      *drawing pixel 2
000025CA  7052                    2501      move.l  #DrawPixelTrapCode, d0
000025CC  320C                    2502      move.w  a4, d1 
000025CE  4E4F                    2503      trap    #15
000025D0  528C                    2504      addq.l  #1, a4
000025D2                          2505      *fetching pixel 3
000025D2                          2506  Pixel3
000025D2  2218                    2507      move.l  (a0)+, d1
000025D4  4243                    2508      clr.w   d3
000025D6  1601                    2509      move.b  d1, d3
000025D8  4201                    2510      clr.b   d1
000025DA  E099                    2511      ror.l   #8, d1
000025DC                          2512      *setting color
000025DC  7050                    2513      move.l  #PaintColorTrapCode, d0
000025DE  4E4F                    2514      trap    #15
000025E0                          2515      
000025E0                          2516      *drawing pixel 3
000025E0  7052                    2517      move.l  #DrawPixelTrapCode, d0
000025E2  320C                    2518      move.w  a4, d1 
000025E4  4E4F                    2519      trap    #15
000025E6  528C                    2520      addq.l  #1, a4
000025E8                          2521      *fetching pixel 4
000025E8                          2522  Pixel4
000025E8  3203                    2523      move.w  d3, d1
000025EA  4841                    2524      swap    d1
000025EC  3218                    2525      move.w  (a0)+,d1
000025EE                          2526      
000025EE                          2527      *setting color
000025EE  7050                    2528      move.l  #PaintColorTrapCode, d0
000025F0  4E4F                    2529      trap    #15
000025F2                          2530      
000025F2                          2531      *drawing pixel 4
000025F2  7052                    2532      move.l  #DrawPixelTrapCode, d0
000025F4  320C                    2533      move.w  a4, d1 
000025F6  4E4F                    2534      trap    #15
000025F8  528C                    2535      addq.l  #1, a4
000025FA  60AA                    2536      bra.s   Loop
000025FC                          2537  
000025FC                          2538  AfterChunkLoop
000025FC                          2539  BytesLoop
000025FC                          2540  EvenPart
000025FC  B9C9                    2541      cmp.l   a1, a4
000025FE  6C00 0032               2542      bge     AfterInnerLoop
00002602                          2543      *fetching pixel
00002602  4281                    2544      clr.l   d1
00002604  3218                    2545      move.w  (a0)+, d1
00002606  E181                    2546      asl.l   #8, d1
00002608  1218                    2547      move.b  (a0)+, d1
0000260A                          2548      *setting color
0000260A  7050                    2549      move.l  #PaintColorTrapCode, d0
0000260C  4E4F                    2550      trap    #15
0000260E                          2551   
0000260E                          2552      *drawing pixel
0000260E  7052                    2553      move.l  #DrawPixelTrapCode, d0
00002610  320C                    2554      move.w  a4, d1 
00002612  4E4F                    2555      trap    #15
00002614  528C                    2556      addq.l  #1, a4
00002616                          2557  
00002616                          2558  OddPart
00002616  B9C9                    2559      cmp.l   a1, a4
00002618  6C00 0018               2560      bge     AfterInnerLoop
0000261C                          2561      *fetching pixel
0000261C  4241                    2562      clr.w   d1
0000261E  1218                    2563      move.b  (a0)+, d1
00002620  4841                    2564      swap    d1
00002622  3218                    2565      move.w  (a0)+, d1
00002624                          2566      
00002624                          2567      *setting color
00002624  7050                    2568      move.l  #PaintColorTrapCode, d0
00002626  4E4F                    2569      trap    #15
00002628                          2570      
00002628                          2571      *drawing pixel
00002628  7052                    2572      move.l  #DrawPixelTrapCode, d0
0000262A  320C                    2573      move.w  a4, d1 
0000262C  4E4F                    2574      trap    #15
0000262E  528C                    2575      addq.l  #1, a4
00002630  60CA                    2576      bra.s   AfterChunkLoop
00002632                          2577  
00002632                          2578  AfterInnerLoop
00002632  D1C6                    2579      add.l   d6, a0 ;end offset is added to a0
00002634  6000 FF38               2580      bra     OuterLoop
00002638                          2581      
00002638                          2582  AfterLoop
00002638  598F                    2583      subq.l  #4, sp ;undoing convinience-add
0000263A  4E75                    2584      rts    
0000263C                          2585  
0000263C                          2586  
0000263C                          2587  
0000263C                          2588  -------------------- end include --------------------
0000263C                          2589      INCLUDE "Rotation.x68"
0000263C                          2590  
0000263C  =00000000               2591  ROT_ANGLE   EQU  0
0000263C  =00000002               2592  ROT_LINE_X  EQU  2
0000263C  =00000004               2593  ROT_LINE_Y  EQU  4
0000263C= 0000                    2594  ANGLE       dc.w 0
0000263E                          2595  
0000263E                          2596  RotatePoint:
0000263E                          2597      *ROTATES A POINT THROUGH A GIVEN ANGLE*
0000263E  588F                    2598      addq.l  #4, sp
00002640  31EF 0000 263C          2599      move.w  ROT_ANGLE(sp), ANGLE
00002646  598F                    2600      subq.l  #4, sp
00002648  6100 005A               2601      bsr     GetSinAtD7
0000264C  3C07                    2602      move.w  d7, d6              ;d6 = sina
0000264E  6100 0038               2603      bsr     GetCosAtD7          ;d7 = cosa
00002652  588F                    2604      add.l   #4, sp
00002654  342F 0002               2605      move.w  ROT_LINE_X(sp), d2  ;x
00002658  362F 0004               2606      move.w  ROT_LINE_Y(sp), d3  ;y
0000265C  C5C7                    2607      muls.w  d7, d2              ;d2 = xcosa
0000265E  C7C6                    2608      muls.w  d6, d3              ;d3 = ysina
00002660  382F 0002               2609      move.w  ROT_LINE_X(sp), d4  ;x
00002664  3A2F 0004               2610      move.w  ROT_LINE_Y(sp), d5  ;y
00002668  C9C6                    2611      muls.w  d6, d4              ;d4 = xsina
0000266A  CBC7                    2612      muls.w  d7, d5              ;d5 = ycosa
0000266C  9483                    2613      sub.l   d3, d2              ;x' = xcosa - ysina
0000266E  DA84                    2614      add.l   d4, d5              ;y' = ycosa + xsina
00002670                          2615      
00002670  E582                    2616      asl.l   #2, d2              ;bringing x' to 2^-16 land
00002672  4242                    2617      clr.w   d2                  ;clearing the floating point data
00002674  4842                    2618      swap    d2                  ;bringing x' to 2^-8 land
00002676  E585                    2619      asl.l   #2, d5
00002678  4245                    2620      clr.w   d5
0000267A  4845                    2621      swap    d5
0000267C  3F42 0002               2622      move.w  d2, ROT_LINE_X(sp)  ;moving x' back into stack
00002680  3F45 0004               2623      move.w  d5, ROT_LINE_Y(sp)  ;moving y' back into stack
00002684  598F                    2624      subq.l  #4, sp
00002686  4E75                    2625      rts
00002688                          2626      
00002688                          2627  GetCosAtD7:
00002688                          2628      *GET COSINE OF ANGLE INTO D7*
00002688  4281                    2629      clr.l   d1
0000268A  3238 263C               2630      move.w  ANGLE, d1
0000268E  0641 005A               2631      add.w   #90, d1             ;cos theta  =  sin(90 + theta)
00002692  B27C 0168               2632      cmp.w   #360, d1
00002696  6D00 0006               2633      blt     DoSin
0000269A  0441 0168               2634      sub.w   #360, d1            ;check for range and bring it back to 0-360
0000269E                          2635  DoSin
0000269E  6100 000A               2636      bsr     GetSinAtD7SkipStart ;get the sine
000026A2  4E75                    2637      rts
000026A4                          2638      
000026A4                          2639  GetSinAtD7:
000026A4                          2640      *GET SINE OF ANGLE INTO D7*
000026A4  4281                    2641      clr.l   d1
000026A6  3238 263C               2642      move.w  ANGLE, d1
000026AA                          2643  GetSinAtD7SkipStart:
000026AA  41F9 00002708           2644      lea     (SINE_TABLE), a0
000026B0  B27C 0168               2645      cmp.w   #360, d1
000026B4  6D00 0006               2646      blt     NinetyCheck
000026B8  0441 0168               2647      sub.w   #360, d1              ;if angle is over 360, bring it back to first quadrant
000026BC                          2648  NinetyCheck
000026BC  B27C 005A               2649      cmp.w   #90, d1
000026C0  6E00 000A               2650      bgt     OneEightyCheck
000026C4  E389                    2651      lsl.l   #1, d1                ;shifting because sine table is in words
000026C6  3E30 1000               2652      move.w  (a0, d1.w), d7
000026CA  603A                    2653      bra.s   ReturnSin             ;sin theta 
000026CC                          2654  OneEightyCheck
000026CC  B27C 00B4               2655      cmp.w   #180, d1
000026D0  6E00 0010               2656      bgt     TwoSeventyCheck
000026D4  303C 00B4               2657      move.w  #180, d0
000026D8  9041                    2658      sub.w   d1, d0
000026DA  E388                    2659      lsl.l   #1, d0                ;shifting because sine table is in words
000026DC  3E30 0000               2660      move.w  (a0, d0.w), d7        ;sin (180 - theta) = sin theta
000026E0  6024                    2661      bra.s   ReturnSin
000026E2                          2662  TwoSeventyCheck
000026E2  B27C 010E               2663      cmp.w   #270, d1
000026E6  6E00 0010               2664      bgt     LastAngleCase
000026EA  0441 00B4               2665      sub.w   #180, d1
000026EE  E389                    2666      lsl.l   #1, d1
000026F0  3E30 1000               2667      move.w  (a0, d1.w), d7        ;shifting because sine table is in words
000026F4  4447                    2668      neg.w   d7                    ;sin(theta - 180) = - sin theta
000026F6  600E                    2669      bra.s   ReturnSin
000026F8                          2670  LastAngleCase
000026F8  303C 0168               2671      move.w  #360, d0
000026FC  9041                    2672      sub.w   d1, d0
000026FE  E388                    2673      lsl.l   #1, d0                ;shifting because sine table is in words
00002700  3E30 0000               2674      move.w  (a0, d0.w), d7        ;sin(360 - theta) = - sin theta
00002704  4447                    2675      neg.w   d7
00002706                          2676  ReturnSin
00002706  4E75                    2677      rts
00002708                          2678      
00002708                          2679  
00002708                          2680  SINE_TABLE:  ;0 thru 90 degrees in 2^-14 land
00002708= 0000 011D 023B 0...     2681      dc.w    0,285,571,857,1142,1427,1712,1996,2280,2563
0000271C= 0B1D 0C36 0D4E 0...     2682      dc.w    2845,3126,3406,3685,3963,4240,4516,4790,5062,5334
00002730= 15E3 16EF 17F9 1...     2683      dc.w    5603,5871,6137,6401,6663,6924,7182,7438,7691,7943
00002744= 2000 20F6 21EA 2...     2684      dc.w    8192,8438,8682,8923,9161,9397,9630,9860,10086,10310
00002758= 2923 29FC 2AD3 2...     2685      dc.w    10531,10748,10963,11173,11381,11585,11785,11982,12175,12365
0000276C= 3106 31BC 326E 3...     2686      dc.w    12550,12732,12910,13084,13254,13420,13582,13740,13894,14043
00002780= 376C 37F9 3882 3...     2687      dc.w    14188,14329,14466,14598,14725,14848,14967,15081,15190,15295
00002794= 3C23 3C83 3CDE 3...     2688      dc.w    15395,15491,15582,15668,15749,15825,15897,15964,16025,16082
000027A8= 3F07 3F36 3F60 3...     2689      dc.w    16135,16182,16224,16261,16294,16321,16344,16361,16374,16381
000027BC= 4000                    2690      dc.w    16384
000027BE                          2691      
000027BE                          2692  
000027BE                          2693  
000027BE                          2694  
000027BE                          2695  
000027BE                          2696  
000027BE                          2697  
000027BE                          2698  
000027BE                          2699  
000027BE                          2700  
000027BE                          2701  
000027BE                          2702  
000027BE                          2703  
000027BE                          2704  
000027BE                          2705  
000027BE                          2706  
000027BE                          2707  
000027BE                          2708  
000027BE                          2709  
000027BE                          2710  
000027BE                          2711  
000027BE                          2712  
000027BE                          2713  
000027BE                          2714  
000027BE                          2715  -------------------- end include --------------------
000027BE                          2716      INCLUDE "SevenSegment.x68"
000027BE                          2717  
000027BE  =00000057               2718  DRAW_RECTANGLE EQU 87
000027BE                          2719  
000027BE                          2720  DrawScore:
000027BE                          2721      *DRAWS THE GAME SCORE ON THE SCREEN BASED ON THE MEMORY VALUES*
000027BE                          2722      
000027BE                          2723      *clearing the background of the score as  a rectangle*
000027BE  7050                    2724      move.l  #SET_PEN_COLOR, d0
000027C0  2239 00002C42           2725      move.l  NEUTRAL_COLOR, d1
000027C6  4E4F                    2726      trap    #15
000027C8  7051                    2727      move.l  #SET_FILL_COLOR, d0
000027CA  4E4F                    2728      trap    #15
000027CC  7057                    2729      move.l  #DRAW_RECTANGLE, d0
000027CE  3239 0000295E           2730      move.w  LEFT_X, d1
000027D4  3439 00002962           2731      move.w  UPPER_Y, d2
000027DA  3639 00002960           2732      move.w  RIGHT_X, d3
000027E0  3839 00002964           2733      move.w  LOWER_Y, d4
000027E6  4E4F                    2734      trap    #15
000027E8  4285                    2735      clr.l   d5
000027EA  4286                    2736      clr.l   d6
000027EC  4281                    2737      clr.l   d1
000027EE                          2738    
000027EE                          2739  ScoreLoop:
000027EE                          2740      *loops through each digit and prints it at proper offset*
000027EE  41F9 00002969           2741      lea     SCORE_DIGITS, a0
000027F4  1030 6000               2742      move.b  (a0, d6), d0                        ;load current digit into d0
000027F8  13C0 00002968           2743      move.b  d0, CURRENT_DIGIT                   ;load it into current_digit
000027FE  41F9 00002956           2744      lea     DIGIT_OFFSETS_X, a0                 ;load digit table address in a0
00002804  2E06                    2745      move.l  d6, d7
00002806  DE86                    2746      add.l   d6, d7                              ;multiply current digit value by 2 (offset is in words table)
00002808  33F0 7000 00002966      2747      move.w  (a0, d7), CURRENT_DIGIT_OFFSET_X    ;get the current digit offset
00002810  48A7 FFFE               2748      movem   ALL_REGS, -(sp)
00002814  4EB9 0000282A           2749      jsr     DrawDigit                           ;draw the digit
0000281A  4C9F 7FFF               2750      movem   (sp)+, ALL_REGS
0000281E  5286                    2751      addq.l  #1, d6                              ;go to the next digit
00002820  BCBC 00000003           2752      cmp.l   #3, d6                              ;if we've drawn 3 digits, quit
00002826  6DC6                    2753      blt     ScoreLoop
00002828  4E75                    2754      rts
0000282A                          2755      
0000282A                          2756   
0000282A                          2757      
0000282A                          2758  DrawDigit:  
0000282A                          2759      *DRAWS ONE DIGIT ON SCREEN AT GIVEN OFFSET*
0000282A  41F9 00002914           2760      lea     SEVEN_SEG_TABLE, a0
00002830  1039 00002968           2761      move.b  CURRENT_DIGIT, d0
00002836  1030 0000               2762      move.b  (a0, d0), d0                        ;get the seven segment code for current digit
0000283A  7207                    2763      move.l  #7, d1
0000283C  41F9 0000291E           2764      lea     LINE_TABLE_X1, a0
00002842  43F9 0000292C           2765      lea     LINE_TABLE_Y1, a1
00002848  45F9 0000293A           2766      lea     LINE_TABLE_X2, a2
0000284E  47F9 00002948           2767      lea     LINE_TABLE_Y2, a3                   ;set up the loop
00002854                          2768  DigitLoop
00002854  0300                    2769      btst    d1, d0                              ;if the current line needs to be drawn for the digit
00002856  6700 0034               2770      beq     NextSegment
0000285A  2401                    2771      move.l  d1, d2
0000285C  D481                    2772      add.l   d1, d2                              ;multiply the line code by 2 for word table
0000285E  33F0 2000 0000296C      2773      move.w  (a0, d2), START_X                   ;get each coordinate for the line from each table
00002866  33F1 2000 00002970      2774      move.w  (a1, d2), START_Y
0000286E  33F2 2000 0000296E      2775      move.w  (a2, d2), END_X
00002876  33F3 2000 00002972      2776      move.w  (a3, d2), END_Y
0000287E  48A7 FFFE               2777      movem   ALL_REGS, -(sp)
00002882  4EB9 0000289A           2778      jsr     DrawLine                            ;draw the line
00002888  4C9F 7FFF               2779      movem   (sp)+, ALL_REGS
0000288C                          2780  NextSegment
0000288C  5381                    2781      subq.l  #1, d1                              ;move to the next line
0000288E  B2BC FFFFFFFF           2782      cmp.l   #-1, d1                             ;if all lines have been checked, quit
00002894  6702                    2783      beq.s   FinishDrawingDigit
00002896  60BC                    2784      bra.s   DigitLoop
00002898                          2785  FinishDrawingDigit
00002898  4E75                    2786      rts
0000289A                          2787  
0000289A                          2788  
0000289A                          2789  
0000289A                          2790  
0000289A                          2791  DrawLine:
0000289A                          2792      *DRAWS A LINE FROM POINT A TO POINT B AT GIVEN OFFSET*
0000289A                          2793      
0000289A  7050                    2794      move.l  #SET_PEN_COLOR, d0
0000289C  2239 00002974           2795      move.l  DIGIT_COLOR, d1
000028A2  4E4F                    2796      trap    #15 
000028A4  4281                    2797      clr.l   d1
000028A6  4282                    2798      clr.l   d2
000028A8  4283                    2799      clr.l   d3
000028AA  4284                    2800      clr.l   d4
000028AC  4285                    2801      clr.l   d5
000028AE  4286                    2802      clr.l   d6
000028B0  3A39 00002966           2803      move.w  CURRENT_DIGIT_OFFSET_X, d5
000028B6  3C39 0000295C           2804      move.w  DIGIT_OFFSET_Y, d6
000028BC                          2805      
000028BC  7054                    2806      move.l  #DRAW_LINE_FROM_TO, d0
000028BE                          2807      
000028BE  3239 0000296C           2808      move.w  START_X, d1
000028C4  D245                    2809      add.w   d5, d1
000028C6                          2810      
000028C6  3439 00002970           2811      move.w  START_Y, d2
000028CC  D446                    2812      add.w   d6, d2
000028CE                          2813      
000028CE  3639 0000296E           2814      move.w  END_X, d3
000028D4  D645                    2815      add.w   d5, d3
000028D6                          2816      
000028D6  3839 00002972           2817      move.w  END_Y, d4
000028DC  D846                    2818      add.w   d6, d4
000028DE                          2819      
000028DE  4E4F                    2820      trap    #15
000028E0  4E75                    2821      rts
000028E2                          2822  
000028E2                          2823  ResetScore:
000028E2                          2824      *RESETS CURRENT SCORE AND PRINTED SCORE TO 000*
000028E2  41F9 00002969           2825      lea     SCORE_DIGITS, a0
000028E8  117C 0000 0000          2826      move.b  #0, 0(a0)
000028EE  117C 0000 0001          2827      move.b  #0, 1(a0)
000028F4  117C 0000 0002          2828      move.b  #0, 2(a0)
000028FA  41F9 000FD134           2829      lea     END_DIGITS, a0
00002900  117C 0000 0000          2830      move.b  #0, 0(a0)
00002906  117C 0000 0001          2831      move.b  #0, 1(a0)
0000290C  117C 0000 0002          2832      move.b  #0, 2(a0)
00002912                          2833  
00002912  4E75                    2834      rts
00002914                          2835      
00002914                          2836  SEVEN_SEG_TABLE:
00002914= 3F 06 5B 4F 66 6D ...   2837      dc.b $3F,$06,$5B,$4F,$66,$6D,$7D,$07,$7F,$6F
0000291E                          2838  
0000291E                          2839  LINE_TABLE_X1:
0000291E= FFFB 0005 0005 0...     2840      dc.w -5,5,5,5,-5,-5,-5
0000292C                          2841      
0000292C                          2842  LINE_TABLE_Y1:
0000292C= FFF6 FFF6 0000 0...     2843      dc.w -10,-10,0,10,10,0,0
0000293A                          2844      
0000293A                          2845  LINE_TABLE_X2: 
0000293A= 0005 0005 0005 F...     2846      dc.w 5,5,5,-5,-5,-5,5
00002948                          2847      
00002948                          2848  LINE_TABLE_Y2: 
00002948= FFF6 0000 000A 0...     2849      dc.w -10,0,10,10,0,-10,0
00002956                          2850      
00002956                          2851  DIGIT_OFFSETS_X:
00002956= 0037 0028 0019          2852      dc.w 55,40,25
0000295C                          2853      
0000295C= 001E                    2854  DIGIT_OFFSET_Y         dc.w  30
0000295E= 0000                    2855  LEFT_X                 dc.w  0
00002960= 003D                    2856  RIGHT_X                dc.w  61
00002962= 0000                    2857  UPPER_Y                dc.w  0
00002964= 0029                    2858  LOWER_Y                dc.w  41
00002966= 0028                    2859  CURRENT_DIGIT_OFFSET_X dc.w  40
00002968= 00                      2860  CURRENT_DIGIT          dc.b  0
00002969                          2861  SCORE_DIGITS:
00002969= 00 00 00                2862                         dc.b 0, 0, 0
0000296C= 0000                    2863  START_X                dc.w  0
0000296E= 0000                    2864  END_X                  dc.w  0
00002970= 0000                    2865  START_Y                dc.w  0
00002972= 0000                    2866  END_Y                  dc.w  0
00002974= 009CF7FF                2867  DIGIT_COLOR            dc.l  $009cf7ff
00002978                          2868      
00002978                          2869  
00002978                          2870  
00002978                          2871  
00002978                          2872  
00002978                          2873  
00002978                          2874  
00002978                          2875  
00002978                          2876  
00002978                          2877  
00002978                          2878  
00002978                          2879  
00002978                          2880  
00002978                          2881  
00002978                          2882  
00002978                          2883  
00002978                          2884  
00002978                          2885  
00002978                          2886  
00002978                          2887  -------------------- end include --------------------
00002978                          2888      INCLUDE "RandomNumbers.x68"
00002978                          2889  ALL_REG                 REG     D0-D7/A0-A6
00002978  =00000008               2890  GET_TIME_COMMAND        EQU     8
00002978                          2891  
00002978  =00000000               2892  RANGE_MIN               EQU     0
00002978  =00000004               2893  RANGE_MAX               EQU     4
00002978                          2894  
00002978                          2895  
00002978                          2896  GetWordInRangeToD6:
00002978                          2897          *RETURNS A WORD IN  THE SPECIFIED RANGE IN D6.W*
00002978  4EB9 0000299A           2898          jsr             GetRandomByteToD6       ;d6.b contains random number
0000297E  588F                    2899          addq.l          #4, sp
00002980  202F 0000               2900          move.l          RANGE_MIN(sp), d0
00002984  222F 0004               2901          move.l          RANGE_MAX(sp), d1 
00002988  9280                    2902          sub.l           d0, d1                  ;getting range
0000298A  8CC1                    2903          divu            d1, d6                  ;d6 = random/range
0000298C  4846                    2904          swap            d6                      ;d6.w = remainder (0 to range -1)
0000298E  CCBC 0000FFFF           2905          and.l           #$0000ffff, d6
00002994  DC80                    2906          add.l           d0, d6                  ;d6.w = range_min to range_max - 1
00002996  598F                    2907          subq.l          #4, sp
00002998  4E75                    2908          rts 
0000299A                          2909              
0000299A                          2910              
0000299A                          2911  GetRandomByteToD6:
0000299A                          2912          *GETS SYSTEM TIME AND RETURNS THE LOWER BYTE IN D6.B*
0000299A  103C 0008               2913          move.b          #GET_TIME_COMMAND,d0
0000299E  4E4F                    2914          TRAP            #15
000029A0  4286                    2915          clr.l           d6
000029A2  1C01                    2916          move.b          d1, d6                  
000029A4  4E75                    2917          rts
000029A6                          2918          
000029A6                          2919          
000029A6                          2920  GetRandomColorInD6:
000029A6                          2921          *STORES A COLOR THAT ISNT EQUAL TO CURRENT COLOR IN D6*
000029A6  2839 00002A36           2922          move.l          ALREADY_SET, d4                 
000029AC  0804 0000               2923          btst            #0, d4                          ;if the  color was already set by a triangle, return that color
000029B0  6700 0014               2924          beq             ProceedGettingColor
000029B4  2C39 00002A3A           2925          move.l          SET_COLOR, d6
000029BA  23FC 00000000 00002A36  2926          move.l          #0, ALREADY_SET                 ;the already set color has been acquired, so set that flag to false
000029C4  4E75                    2927          rts
000029C6                          2928  ProceedGettingColor
000029C6  41F9 000FD0F6           2929          lea             COLOR_ARRAY, a0
000029CC                          2930  GetColor:
000029CC  4EB8 299A               2931          jsr             GetRandomByteToD6
000029D0  8CFC 0004               2932          divu            #4, d6
000029D4  4846                    2933          swap            d6
000029D6  CCBC 0000FFFF           2934          and.l           #$0000ffff, d6
000029DC  2E06                    2935          move.l          d6, d7
000029DE  CCFC 0004               2936          mulu            #4, d6
000029E2  2C30 6000               2937          move.l          (a0, d6.w), d6
000029E6  BCB9 00002A32           2938          cmp.l           LAST_COLOR, d6                  ;if the color is not the same as the last  color spawned, we can return it
000029EC  6600 0034               2939          bne             ReturnRandomColor
000029F0                          2940  DamageControl
000029F0  4EB8 299A               2941          jsr             GetRandomByteToD6               ;if not, we take the previous or next color randomly
000029F4  0806 0002               2942          btst            #2, d6
000029F8  6700 0012               2943          beq             AddOne
000029FC                          2944  SubOne
000029FC  5387                    2945          subq.l          #1, d7  
000029FE  BEBC 00000000           2946          cmp.l           #0, d7
00002A04  6C00 0014               2947          bge             ProceedWithDamageControl        ;color table overflow check
00002A08  7E03                    2948          move.l          #3, d7
00002A0A  600E                    2949          bra.s           ProceedWithDamageControl
00002A0C                          2950  AddOne
00002A0C  5287                    2951          addq.l          #1, d7
00002A0E  BEBC 00000003           2952          cmp.l           #3, d7
00002A14  6F00 0004               2953          ble             ProceedWithDamageControl        ;color table overflow check
00002A18                          2954  
00002A18  7E00                    2955          move.l          #0, d7
00002A1A                          2956  ProceedWithDamageControl
00002A1A  CEFC 0004               2957          mulu            #4, d7                          ;multiply by 4 to get the actual color table pointer
00002A1E  2C30 7000               2958          move.l          (a0, d7.w), d6                  ;get the color into d6
00002A22                          2959  ReturnRandomColor
00002A22  23C6 00002A32           2960          move.l          d6, LAST_COLOR                  ;save the current color as last color and return
00002A28  4E75                    2961          rts
00002A2A                          2962  
00002A2A                          2963  RANDOMVAL       ds.l    1
00002A2E                          2964  TEMPRANDOMLONG  ds.l    1
00002A32= 00000001                2965  LAST_COLOR      dc.l    1
00002A36= 00000000                2966  ALREADY_SET     dc.l    0
00002A3A= 00000000                2967  SET_COLOR       dc.l    0
00002A3E                          2968  
00002A3E                          2969  
00002A3E                          2970  
00002A3E                          2971  
00002A3E                          2972  
00002A3E                          2973  
00002A3E                          2974  
00002A3E                          2975  
00002A3E                          2976  
00002A3E                          2977  
00002A3E                          2978  
00002A3E                          2979  
00002A3E                          2980  
00002A3E                          2981  
00002A3E                          2982  
00002A3E                          2983  
00002A3E                          2984  
00002A3E                          2985  
00002A3E                          2986  
00002A3E                          2987  
00002A3E                          2988  
00002A3E                          2989  
00002A3E                          2990  
00002A3E                          2991  
00002A3E                          2992  
00002A3E                          2993  
00002A3E                          2994  -------------------- end include --------------------
00002A3E                          2995      INCLUDE "Switcher.x68"
00002A3E                          2996   
00002A3E  =00000004               2997  POWERUP_TYPE            EQU 4
00002A3E  =0000000E               2998  SWITCHER_COLOR          EQU 14
00002A3E                          2999  
00002A3E                          3000  
00002A3E  =00000012               3001  SWITCHER_CLASS_SIZE     EQU 18
00002A3E                          3002  
00002A3E                          3003  
00002A3E  =00000014               3004  SWITCHER_WIDTH          EQU 20
00002A3E  =00000014               3005  SWITCHER_HEIGHT         EQU SWITCHER_WIDTH
00002A3E                          3006  
00002A3E  =0000005B               3007  DRAW_UNFILLED_ELLIPSE   EQU 91
00002A3E                          3008  
00002A3E                          3009  SpawnSwitcher:
00002A3E                          3010      *SPAWNS A COLOR SWITCHER AT THE GIVEN LOCATION WITH POSITION AND RANDOM COLOR, STORES VALUES STARTING AT A0*
00002A3E  217C 00000001 0000      3011      move.l  #1, IS_ENABLED(a0)      ;object is enabled
00002A46  217C 00000002 0004      3012      move.l  #2, POWERUP_TYPE(a0)    
00002A4E  0440 000A               3013      sub.w   #SCORE_WIDTH/2, d0      ;d0 has the center point X, we need top left to draw circle
00002A52  0481 00000000           3014      sub.l   #SCORE_HEIGHT/2<<8, d1  ;d1 has the center point Y in 2^-8, we need top left to draw circle
00002A58  3140 0008               3015      move.w  d0, BOX_S_X(a0)         
00002A5C  2141 000A               3016      move.l  d1, BOX_S_Y(a0)         ;once computed, move the X and Y into the memory location for this powerup
00002A60  2248                    3017      move.l  a0, a1                  
00002A62  4EB8 29A6               3018      jsr     GetRandomColorInD6      
00002A66  2049                    3019      move.l  a1, a0                  
00002A68  2146 000E               3020      move.l  d6, SWITCHER_COLOR(a0)  
00002A6C  4E75                    3021      rts
00002A6E                          3022      
00002A6E                          3023      
00002A6E                          3024      
00002A6E                          3025  UpdateSwitcher:
00002A6E                          3026      *UPDATES POSITION OF COLOR SWITCHER AND INCREMENTS SCORE ON COLLISION WITH BALL*
00002A6E                          3027      
00002A6E                          3028      *Clear Phase*
00002A6E  705D                    3029      move.l  #SET_PEN_WIDTH, d0
00002A70  7203                    3030      move.l  #3, d1
00002A72  4E4F                    3031      trap    #15                             ;set pen width to 3
00002A74                          3032      
00002A74  7050                    3033      move.l  #SET_PEN_COLOR, d0
00002A76  2239 00002C42           3034      move.l  NEUTRAL_COLOR, d1
00002A7C  4E4F                    3035      trap    #15                             ;set pen color to neutral
00002A7E                          3036      
00002A7E  705B                    3037      move.l  #DRAW_UNFILLED_ELLIPSE, d0
00002A80  3228 0008               3038      move.w  BOX_S_X(a0),d1
00002A84                          3039      
00002A84  2428 000A               3040      move.l  BOX_S_Y(a0), d2
00002A88  E082                    3041      asr.l   #8, d2
00002A8A                          3042      
00002A8A                          3043      
00002A8A  3601                    3044      move.w  d1, d3
00002A8C  0683 00000014           3045      add.l   #(SWITCHER_WIDTH), d3
00002A92  2802                    3046      move.l  d2, d4
00002A94                          3047      
00002A94  0684 00000014           3048      add.l   #(SWITCHER_HEIGHT), d4
00002A9A                          3049      
00002A9A  4E4F                    3050      trap    #15                             ;pass the parameters for the ellipse and draw with neutral color
00002A9C                          3051      
00002A9C  0839 0000 00002C46      3052      btst    #0, ABOVE_MID                   ;check if switcher needs to scroll
00002AA4  6700 001E               3053      beq     SkipSwitcherMove
00002AA8                          3054      
00002AA8                          3055      *Update Phase*
00002AA8                          3056      
00002AA8  2028 000A               3057      move.l BOX_S_Y(a0), d0             
00002AAC  2239 00002C36           3058      move.l BALL_Y_VEL, d1
00002AB2  C3F9 00002C4C           3059      muls   (DELTA_TIME), d1
00002AB8                          3060      
00002AB8  2401                    3061      move.l  d1, d2
00002ABA                          3062       
00002ABA  E482                    3063      asr.l   #2, d2                          ;d2 = velocity * delta_time * 0.1
00002ABC                          3064       
00002ABC  D282                    3065      add.l   d2, d1                          ;d1 = 1.1 * velocity * delta_time
00002ABE                          3066       
00002ABE  9081                    3067      sub.l   d1, d0                          ;update position
00002AC0                          3068       
00002AC0  2140 000A               3069      move.l  d0, BOX_S_Y(a0)                 ;save it
00002AC4                          3070      
00002AC4                          3071  SkipSwitcherMove
00002AC4                          3072  
00002AC4                          3073      *Collision Check Phase*
00002AC4                          3074  
00002AC4  0680 00001900           3075      add.l   #(SWITCHER_HEIGHT+5)<<8, d0     
00002ACA  B0B9 00002C32           3076      cmp.l   BALLPOS_Y, d0                  ;comparing if the ball's top point has crossed the powerup's bottom point
00002AD0  6D00 000A               3077      blt     NoSwitch
00002AD4  4EB9 00002B10           3078      jsr     UpdateColor                    ;if so, change ball color and destroy powerup
00002ADA  4E75                    3079      rts
00002ADC                          3080  NoSwitch
00002ADC                          3081      *Draw Phase*
00002ADC  705D                    3082       move.l  #SET_PEN_WIDTH, d0            ;set pen width to 3
00002ADE  7203                    3083       move.l  #3, d1
00002AE0  4E4F                    3084       trap    #15
00002AE2                          3085       
00002AE2  7050                    3086       move.l  #SET_PEN_COLOR, d0            
00002AE4  2238 1B38               3087       move.l  POWERUP_COLOR, d1
00002AE8                          3088       
00002AE8  4E4F                    3089       trap    #15 
00002AEA                          3090  
00002AEA  705B                    3091       move.l  #DRAW_UNFILLED_ELLIPSE, d0
00002AEC  3228 0008               3092       move.w  BOX_S_X(a0),d1
00002AF0                          3093      
00002AF0  2428 000A               3094       move.l  BOX_S_Y(a0), d2
00002AF4  E082                    3095       asr.l   #8, d2
00002AF6                          3096      
00002AF6  3601                    3097       move.w  d1, d3
00002AF8  0683 00000014           3098       add.l   #(SCORE_WIDTH), d3
00002AFE  2802                    3099       move.l  d2, d4
00002B00                          3100      
00002B00  0684 00000014           3101       add.l   #(SCORE_HEIGHT), d4
00002B06                          3102      
00002B06  4E4F                    3103       trap    #15                            ;draw the ellipse with the color and size
00002B08                          3104       
00002B08  705D                    3105       move.l  #SET_PEN_WIDTH, d0
00002B0A  7201                    3106       move.l  #1, d1
00002B0C  4E4F                    3107       trap    #15                            ;restore pen size
00002B0E                          3108       
00002B0E  4E75                    3109       rts
00002B10                          3110      
00002B10                          3111      
00002B10                          3112  UpdateColor:
00002B10                          3113      *INCREASES SCORE AND DELETES POWERUP*
00002B10  4EB9 00002BAE           3114      jsr     PlaySwitchSound                 ;play switch sound
00002B16                          3115      
00002B16  705D                    3116      move.l  #SET_PEN_WIDTH, d0
00002B18  7201                    3117      move.l  #1, d1          
00002B1A  4E4F                    3118      trap    #15                             ;restore pen size
00002B1C                          3119      
00002B1C  217C 00000000 0000      3120      move.l  #0, IS_ENABLED(a0)              ;disabling powerup because it's taken
00002B24  23E8 000E 00002C3E      3121      move.l  SWITCHER_COLOR(a0), BALL_COLOR  ;giving ball the new color
00002B2C  4EB8 1A54               3122      jsr     UpdateScore                     ;add one point
00002B30  4E75                    3123      rts
00002B32                          3124  
00002B32                          3125  
00002B32                          3126  
00002B32                          3127  
00002B32                          3128  
00002B32                          3129  
00002B32                          3130  
00002B32                          3131  
00002B32                          3132  
00002B32                          3133  
00002B32                          3134  
00002B32                          3135  
00002B32                          3136  
00002B32                          3137  
00002B32                          3138  
00002B32                          3139  
00002B32                          3140  
00002B32                          3141  
00002B32                          3142  
00002B32                          3143  
00002B32                          3144  
00002B32                          3145  
00002B32                          3146  
00002B32                          3147  
00002B32                          3148  
00002B32                          3149  
00002B32                          3150  
00002B32                          3151  
00002B32                          3152  
00002B32                          3153  
00002B32                          3154  
00002B32                          3155  -------------------- end include --------------------
00002B32                          3156      INCLUDE "Sounds.x68"
00002B32  =00000000               3157  THEME_REF   EQU 0
00002B32  =00000001               3158  JUMP_REF    EQU 1
00002B32  =00000002               3159  HIT_REF     EQU 2
00002B32  =00000003               3160  COIN_REF    EQU 3
00002B32  =00000004               3161  SWITCH_REF  EQU 4
00002B32  =0000004A               3162  LOAD_SOUND  EQU 74
00002B32  =0000004D               3163  PLAY_SOUND  EQU 77
00002B32                          3164  
00002B32                          3165  LoadSounds:
00002B32                          3166      *LOAD EACH SOUND INTO DIRECTX MEMORY AND GIVE IT A REFERENCE NUMBER*
00002B32  704A                    3167      move.l  #LOAD_SOUND, d0
00002B34                          3168      
00002B34  43F9 00002BD6           3169      lea     hit, a1
00002B3A  123C 0002               3170      move.b  #HIT_REF, d1
00002B3E  4E4F                    3171      trap    #15
00002B40                          3172  
00002B40  704A                    3173      move.l  #LOAD_SOUND, d0
00002B42  43F9 00002BC2           3174      lea     jump, a1
00002B48  123C 0001               3175      move.b  #JUMP_REF, d1
00002B4C  4E4F                    3176      trap    #15
00002B4E                          3177          
00002B4E  704A                    3178      move.l  #LOAD_SOUND, d0
00002B50  43F9 00002BFE           3179      lea     switch, a1
00002B56  123C 0004               3180      move.b  #SWITCH_REF, d1
00002B5A  4E4F                    3181      trap    #15
00002B5C                          3182      
00002B5C  704A                    3183      move.l  #LOAD_SOUND, d0
00002B5E  43F9 00002BEA           3184      lea     coin, a1
00002B64  123C 0003               3185      move.b  #COIN_REF, d1
00002B68  4E4F                    3186      trap    #15
00002B6A                          3187  
00002B6A  704A                    3188      move.l  #LOAD_SOUND, d0
00002B6C                          3189      
00002B6C  43F9 00002C16           3190      lea     theme, a1
00002B72  123C 0000               3191      move.b  #THEME_REF, d1
00002B76  4E4F                    3192      trap    #15
00002B78                          3193      
00002B78  4E75                    3194      rts
00002B7A                          3195  
00002B7A                          3196  PlayTheme:
00002B7A                          3197      *PLAY THE THEME SOUND ON LOOP*
00002B7A  704D                    3198      move.l  #PLAY_SOUND, d0
00002B7C  7401                    3199      move.l  #1, d2
00002B7E  123C 0000               3200      move.b  #THEME_REF, d1
00002B82  4E4F                    3201      trap    #15
00002B84  4E75                    3202      rts
00002B86                          3203  
00002B86                          3204  PlaySound:
00002B86                          3205      *PLAY THE SOUND REFERENCED AT D1*
00002B86  704D                    3206      move.l  #PLAY_SOUND, d0
00002B88  7400                    3207      move.l  #0, d2
00002B8A  4E4F                    3208      trap    #15
00002B8C  4E75                    3209      rts
00002B8E                          3210   
00002B8E                          3211  StopTheme:
00002B8E                          3212      *STOP THE THEME SOUND*
00002B8E  704D                    3213      move.l  #PLAY_SOUND, d0
00002B90  7402                    3214      move.l  #2, d2
00002B92  123C 0000               3215      move.b  #THEME_REF, d1
00002B96  4E4F                    3216      trap    #15
00002B98  4E75                    3217      rts
00002B9A                          3218  
00002B9A                          3219  
00002B9A                          3220  PlayJumpSound:
00002B9A                          3221      *MOVE JUMP REF INTO D1 AND CALL PLAY SOUND*
00002B9A  123C 0001               3222      move.b  #JUMP_REF, d1
00002B9E  4EB8 2B86               3223      jsr     PlaySound
00002BA2  4E75                    3224      rts
00002BA4                          3225  
00002BA4                          3226  PlayDeathSound:
00002BA4                          3227      *MOVE HIT REF INTO D1 AND CALL PLAY SOUND*
00002BA4  123C 0002               3228      move.b  #HIT_REF, d1
00002BA8  4EB8 2B86               3229      jsr     PlaySound
00002BAC  4E75                    3230      rts
00002BAE                          3231  
00002BAE                          3232  PlaySwitchSound:
00002BAE                          3233      *MOVE SWITCH REF INTO D1 AND CALL PLAY SOUND*
00002BAE                          3234       
00002BAE  123C 0004               3235      move.b  #SWITCH_REF, d1
00002BB2  4EB8 2B86               3236      jsr     PlaySound
00002BB6  4E75                    3237      rts
00002BB8                          3238     
00002BB8                          3239  PlayCoinSound:
00002BB8                          3240      *MOVE COIN REF INTO D1 AND CALL PLAY SOUND*
00002BB8                          3241      
00002BB8  123C 0003               3242      move.b  #COIN_REF, d1
00002BBC  4EB8 2B86               3243      jsr     PlaySound
00002BC0  4E75                    3244      rts
00002BC2                          3245  
00002BC2                          3246  
00002BC2= 536F756E 64735C6A ...   3247  jump    dc.l    'Sounds\jump.wav', 0
00002BD6= 536F756E 64735C68 ...   3248  hit     dc.l    'Sounds\hit.wav', 0
00002BEA= 536F756E 64735C63 ...   3249  coin    dc.l    'Sounds\coin.wav', 0
00002BFE= 536F756E 64735C73 ...   3250  switch  dc.l    'Sounds\switch.wav', 0
00002C16= 536F756E 64735C54 ...   3251  theme   dc.l    'Sounds\Tetris.wav', 0
00002C2E                          3252  
00002C2E                          3253  
00002C2E                          3254  
00002C2E                          3255  
00002C2E                          3256  
00002C2E                          3257  
00002C2E                          3258  
00002C2E                          3259  
00002C2E                          3260  
00002C2E                          3261  
00002C2E                          3262  
00002C2E                          3263  
00002C2E                          3264  
00002C2E                          3265  
00002C2E                          3266  
00002C2E                          3267  -------------------- end include --------------------
00002C2E                          3268      
00002C2E                          3269      
00002C2E= 00000136                3270  BALLPOS_X               dc.l (SCREEN_WIDTH-BALL_WIDTH)/2
00002C32= 0001AE00                3271  BALLPOS_Y               dc.l BALL_INIT_Y_POS
00002C36= 00000000                3272  BALL_Y_VEL              dc.l 0
00002C3A= 00000000                3273  BALL_Y_VEL_ADJUSTED     dc.l 0
00002C3E= 00000000                3274  BALL_COLOR              dc.l 0
00002C42= 001B1B1B                3275  NEUTRAL_COLOR           dc.l $001b1b1b
00002C46= 00                      3276  ABOVE_MID               dc.b 0
00002C47= 00                      3277  FILLER                  dc.b 0
00002C48                          3278  
00002C48= FFFFFBB4                3279  JUMP_FORCE              dc.l -1100          ;magic values 1300, 10
00002C4C= 0000                    3280  DELTA_TIME              dc.w 0  
00002C4E= 00000008                3281  GRAVITY                 dc.l 8
00002C52= 00002710                3282  TIME_SINCE_LAST_KEY     dc.l 10000
00002C56= 00000000                3283  PREV_TIME               dc.l 0
00002C5A= 00000000                3284  KEY_PRESSED             dc.l 0
00002C5E                          3285  
00002C5E                          3286  Background              incbin "Bitmaps/Background.bmp"
000E3C96                          3287  
000E3C96= 00000000                3288  ELAPSED_INS_TIME        dc.l 0
000E3C9A                          3289  Instructions            incbin  "Bitmaps/Instructions.bmp" 
000F02D2                          3290  InstructionsGlow        incbin  "Bitmaps/InstructionsGlow.bmp"
000FC90A= FFFFFFFF                3291  GLOW                    dc.l $FFFFFFFF
000FC90E                          3292  
000FC90E                          3293  
000FC90E                          3294  OBSTACLE_LIST           ds.l 300
000FCDBE                          3295  SCORE_POWERUP_LIST      ds.l 100
000FCF4E                          3296  SWITCHER_LIST           ds.l 100
000FD0DE                          3297  
000FD0DE= 00000000                3298  OBSTACLE_COUNT          dc.l 0
000FD0E2= 00000000                3299  OBSTACLE_TYPE_HANDLERS  dc.l 0
000FD0E6= 0001D600                3300  OBSTACLE_GAP            dc.l 470<<8
000FD0EA                          3301  
000FD0EA                          3302  SCORE_X                 ds.w 1
000FD0EC                          3303  SCORE_Y                 ds.l 1
000FD0F0                          3304  
000FD0F0                          3305  SWITCHER_X              ds.w 1
000FD0F2                          3306  SWITCHER_Y              ds.l 1
000FD0F6                          3307  
000FD0F6= 003C00FF 00FFBA00 ...   3308  COLOR_ARRAY             dc.l COLOR_RED, COLOR_BLUE, COLOR_YELLOW, COLOR_PURPLE
000FD106                          3309  
000FD106= 00001B50 00001E92 ...   3310  SPAWN_TABLE             dc.l SpawnBox,  SpawnCross, SpawnTriangle
000FD112= 00001C1C 00001EDA ...   3311  UPDATE_TABLE            dc.l UpdateBox, UpdateCross, UpdateTriangle
000FD11E                          3312  
000FD11E                          3313  TEMP_RANDOM             ds.w 1
000FD120                          3314  
000FD120= 00AA                    3315  MESSAGE_X               dc.w 170
000FD122= 012C                    3316  MESSAGE_Y               dc.w 300
000FD124                          3317  
000FD124= 47 47 21 20 59 6F ...   3318  EndMessage              dc.b 'GG! Your score: '
000FD134= 00 00 00 00             3319  END_DIGITS              dc.b 0, 0, 0, 0
000FD138= 20 20 48 69 67 68 ...   3320  HighScoreMessage        dc.b '  High Score: '
000FD146= 30 30 30                3321  HIGH_SCORE_DIGITS       dc.b '000'
000FD149= 20 20 00                3322  HighScoreMessageEnd     dc.b '  ', 0
000FD14C= 20 20 48 69 74 20 ...   3323  RestartMessage          dc.b '  Hit R to restart ', 0
000FD160= 20 20 4E 65 77 20 ...   3324  IsHighScoreMessage      dc.b '  New High Score!  ', 0
000FD174= 00000000                3325  HIGH_SCORE              dc.l 0
000FD178= 00000000                3326  SCORE                   dc.l 0
000FD17C= 00000000                3327  IS_HIGH_SCORE           dc.l 0 
000FD180                          3328  
000FD180= 00 12 00 00             3329  FONT_PROP              dc.b 0, FONT_SIZE, 0, 0
000FD184                          3330  
000FD184                          3331       ;last one is used to null terminate end string
000FD184                          3332  
000FD184                          3333      END START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABOVE_MID           2C46
ADDFORCETOBALL      14D0
ADDNEWOBSTACLE      1798
ADDOFFSET           1ED4
ADDONE              2A0C
AFTERCHUNKLOOP      25FC
AFTERFINDCOLORLOOP  222C
AFTERFINDSPOTLOOP   186E
AFTERINNERLOOP      2632
AFTERLOOP           2638
AFTERNORMAL         142A
AFTERSECONDCOLOR    224C
AFTERSMALLESTYLOOP  17D0
ALL_REG             7FFF
ALL_REGS            7FFF
ALREADY_SET         2A36
ANGLE               263C
APPENDSWITCHER      192A
BACKGROUND          2C5E
BALLPOS_X           2C2E
BALLPOS_Y           2C32
BALL_COLOR          2C3E
BALL_HEIGHT         14
BALL_INIT_Y_POS     1AE00
BALL_WIDTH          14
BALL_Y_VEL          2C36
BALL_Y_VEL_ADJUSTED  2C3A
BITMAPOFFSETTOBITSPERPIXEL  1C
BITMAPOFFSETTOHEADERSIZE  E
BITMAPOFFSETTOHEIGHT  16
BITMAPOFFSETTOPIXELOFFET  A
BITMAPOFFSETTOWIDTH  12
BOX_ANG             2E
BOX_ANG_FP          30
BOX_ANG_FP_INIT     1E88
BOX_ANG_INIT        1E86
BOX_CLASS_SIZE      3C
BOX_FILLER_INIT     1E91
BOX_SIDE_HALF       3A
BOX_S_X             8
BOX_S_X_INIT        1E80
BOX_S_Y             A
BOX_S_Y_INIT        1E82
BOX_TYPE_INIT       1E7C
BOX_WIDTH           38
BOX_WIDTH_INIT      1E90
BOX_X1              E
BOX_X1_O            1E
BOX_X2              12
BOX_X2_O            22
BOX_X3              16
BOX_X3_O            26
BOX_X4              1A
BOX_X4_O            2A
BOX_Y1              10
BOX_Y1_O            20
BOX_Y2              14
BOX_Y2_O            24
BOX_Y3              18
BOX_Y3_O            28
BOX_Y4              1C
BOX_Y4_O            2C
BOX_Y_VEL           34
BOX_Y_VEL_INIT      1E8C
BYTESLOOP           25FC
CHECKCOLLISION      162E
CHECKCROSSNEG       1F10
CHECKHIGHSCORE      138A
CHECKIFABOVE        151E
CHECKIFABOVEMID     1556
CHECKIFBELOWMID     157E
CHECKNEG            1C52
CHECKTRIANGLENEG    22C8
CLEARALLREGS        1120
CLEARBOX            1DF8
CLEARCROSS          20AE
CLEARINSTRUCTIONS   1474
CLEAROBSTACLEANDPOWERUPLISTS  1966
CLEARTRIANGLE       241A
COIN                2BEA
COIN_REF            3
COLOR_1             1A
COLOR_2             2A
COLOR_3             3C
COLOR_ARRAY         FD0F6
COLOR_BLUE          FFBA00
COLOR_PURPLE        FF006C
COLOR_RED           3C00FF
COLOR_YELLOW        BAFF
CONTINUEUPDATINGOBSTACLES  1756
CURRENT_DIGIT       2968
CURRENT_DIGIT_OFFSET_X  2966
DAMAGECONTROL       29F0
DEBOUNCETIME        C8
DELAYLOOP           13C4
DELETEBOX           1DE8
DELTA_TIME          2C4C
DIGITLOOP           2854
DIGIT_COLOR         2974
DIGIT_OFFSETS_X     2956
DIGIT_OFFSET_Y      295C
DIRECTION           39
DISTANCE_BELOW_BOTTOM_TO_KILL  A000
DONE                11B8
DOSIN               269E
DOUBLE_BUFFERED_MODE  11
DRAWBACKGROUND      11BA
DRAWBALL            1598
DRAWBGCHUNK         15CE
DRAWBITMAP          2494
DRAWBITMAPADDRESS   0
DRAWBITMAPHEIGHT    10
DRAWBITMAPSCREENX   14
DRAWBITMAPSCREENY   18
DRAWBITMAPWIDTH     C
DRAWBITMAPX         4
DRAWBITMAPY         8
DRAWDIGIT           282A
DRAWING_MODE        5C
DRAWINSTRUCTIONS    1402
DRAWLINE            289A
DRAWPIXELTRAPCODE   52
DRAWSCORE           27BE
DRAWTRIANGLE        1AC8
DRAW_CIRCLE         58
DRAW_LINE_FROM_TO   54
DRAW_LINE_TO        55
DRAW_PIXEL          162B1BA
DRAW_RECTANGLE      57
DRAW_STRING         5F
DRAW_UNFILLED_ELLIPSE  5B
ELAPSED_INS_TIME    E3C96
ENDCALL             173E
ENDGAME             1216
ENDHIGHSCORECHECK   13BC
ENDKEYUP            1164
ENDLOOP             1316
ENDMESSAGE          FD124
END_DIGITS          FD134
END_X               296E
END_Y               2972
EVENPART            25FC
FILLER              2C47
FINDCOLORLOOP       2212
FINDNEXTPOWERUPSPOT  191E
FINDNEXTSPOT        1862
FINDNEXTSWITCHERSPOT  195A
FINDPOWERUPSPOTLOOP  18F6
FINDSMALLESTYLOOP   17A6
FINDSPOTLOOP        17DE
FINDSWITCHERSPOTLOOP  1932
FINISHDRAWINGDIGIT  2898
FINISHUPDATE        1A8C
FINISHUPDATINGOBSTACLES  1792
FIRSTCOLOR          222C
FONT_PROP           FD180
FONT_SIZE           12
GAMELOOP            10D4
GETCOLOR            29CC
GETCOSATD7          2688
GETDELTATIME        1132
GETINPUT            1166
GETKEYUPS           114C
GETRANDOMBYTETOD6   299A
GETRANDOMCOLORIND6  29A6
GETSINATD7          26A4
GETSINATD7SKIPSTART  26AA
GETWORDINRANGETOD6  2978
GET_PIXEL           53
GET_TIME_COMMAND    8
GLOW                FC90A
GOTORESTART         12E2
GRAVITY             2C4E
HIGHSCOREMESSAGE    FD138
HIGHSCOREMESSAGEEND  FD149
HIGH_SCORE          FD174
HIGH_SCORE_DIGITS   FD146
HIT                 2BD6
HIT_REF             2
INITIALPOINTEROFFSET  2552
INSTRUCTIONLOOP     13CE
INSTRUCTIONS        E3C9A
INSTRUCTIONSGLOW    F02D2
ISHIGHSCOREMESSAGE  FD160
IS_ENABLED          0
IS_ENABLED_INIT     1E78
IS_HIGH_SCORE       FD17C
ITEM_TYPE           4
JUMP                2BC2
JUMP_FORCE          2C48
JUMP_REF            1
KEY_PRESSED         2C5A
KEY_TRAP            13
LASTANGLECASE       26F8
LAST_COLOR          2A32
LEFT_X              295E
LINE_TABLE_X1       291E
LINE_TABLE_X2       293A
LINE_TABLE_Y1       292C
LINE_TABLE_Y2       2948
LOADSOUNDS          2B32
LOAD_SOUND          4A
LOOP                25A6
LOWER_Y             2964
MAX_BOX_HALF_LENGTH  69
MAX_BOX_WIDTH       C
MAX_CROSS_HALF      69
MAX_TRIANGLE_HALF   73
MESSAGE_X           FD120
MESSAGE_Y           FD122
MIN_BOX_HALF_LENGTH  4B
MIN_BOX_WIDTH       9
MIN_CROSS_HALF      5F
MIN_TRIANGLE_HALF   5F
NEUTRAL_COLOR       2C42
NEXTITEMY           17C6
NEXTOBSTACLE        1788
NEXTPOWERUP         189E
NEXTSEGMENT         288C
NEXTSWITCHER        18CC
NINETYCHECK         26BC
NOCOLLISION         1A42
NORMAL              1422
NORMALCROSSROTATION  1EF8
NORMALROTATION      1C3A
NORMALTRIANGLEROTATION  22B0
NOSWITCH            2ADC
OBSTACLEUPDATELOOP  175E
OBSTACLE_COUNT      FD0DE
OBSTACLE_GAP        FD0E6
OBSTACLE_LIST       FC90E
OBSTACLE_TYPE_HANDLERS  FD0E2
ODDBOUNDARY         258C
ODDPART             2616
ONEEIGHTYCHECK      26CC
OUTERLOOP           256E
PAINTCOLORTRAPCODE  50
PIXEL2              25C0
PIXEL3              25D2
PIXEL4              25E8
PLAYCOINSOUND       2BB8
PLAYDEATHSOUND      2BA4
PLAYJUMPSOUND       2B9A
PLAYSOUND           2B86
PLAYSWITCHSOUND     2BAE
PLAYTHEME           2B7A
PLAY_SOUND          4D
POWERUPUPDATELOOP   1884
POWERUP_COLOR       1B38
POWERUP_TYPE        4
PREGAME             1086
PREGAMELOOP         109E
PREV_TIME           2C56
PRINTABSOLUTE       1C
PROCEEDEIGHTH       173C
PROCEEDFIFTH        16DC
PROCEEDFIRST        165E
PROCEEDFOURTH       16BC
PROCEEDGETTINGCOLOR  29C6
PROCEEDGETTINGINPUT  1180
PROCEEDSECOND       167C
PROCEEDSEVENTH      171E
PROCEEDSIXTH        16FA
PROCEEDSPAWNING     18EE
PROCEEDTHIRD        169E
PROCEEDWITHDAMAGECONTROL  2A1A
QUITADDINGOBSTACLE  187A
QUITDELAY           13CC
QUITINS             13FA
RANDOMVAL           2A2A
RANGE_MAX           4
RANGE_MIN           0
REPAINT_SCREEN      5E
RESETSCORE          28E2
RESTART             1324
RESTARTMESSAGE      FD14C
RESUMECROSSROT      1F22
RESUMEROT           1C64
RESUMETRIANGLEROT   22DA
RETURNBELOWMID      1596
RETURNCHECK         157C
RETURNFROMUPDATEPOWERUP  18A8
RETURNFROMUPDATESWITCHERS  18D6
RETURNRANDOMCOLOR   2A22
RETURNROLL          1928
RETURNSIN           2706
RETURNSWITCHER      1964
RETURNUPDATEBALL    1554
REVERSESPIN         1C14
REVERSETRIANGLESPIN  228A
RIGHT_X             2960
ROLLDIETOSPAWNPOWERUP  18D8
ROTATEPOINT         263E
ROT_ANGLE           0
ROT_LINE_X          2
ROT_LINE_Y          4
SCORE               FD178
SCORELOOP           27EE
SCORE_CLASS_SIZE    E
SCORE_DIGITS        2969
SCORE_HEIGHT        14
SCORE_POWERUP_LIST  FCDBE
SCORE_WIDTH         14
SCORE_X             FD0EA
SCORE_Y             FD0EC
SCREEN_HEIGHT       1E0
SCREEN_WIDTH        280
SECONDCOLOR         223C
SETBOXPARAMS        1B78
SETTRIANGLEPARAMS   214C
SET_COLOR           2A3A
SET_FILL_COLOR      51
SET_FONT_PROPS      15
SET_OUTPUT_WINDOW   21
SET_PEN_COLOR       50
SET_PEN_WIDTH       5D
SEVEN_SEG_TABLE     2914
SINE_TABLE          2708
SKIPABOVECHECK      1524
SKIPADDX            2510
SKIPADDY            24FC
SKIPCROSSVELOCITY   2004
SKIPPAD             2550
SKIPSCOREMOVE       1A26
SKIPSWITCHERMOVE    2AC4
SKIPTRIANGLEVELOCITY  239C
SKIPVELOCITY        1D48
SMALLDELAY          13BE
SPAWNBOX            1B50
SPAWNCROSS          1E92
SPAWNFIRSTBOX       1B3C
SPAWNSCOREPOWERUP   19D4
SPAWNSWITCHER       2A3E
SPAWNTRIANGLE       2124
SPAWN_TABLE         FD106
START               1000
STARTINGPOINT       1018
START_X             296C
START_Y             2970
STOPTHEME           2B8E
SUBONE              29FC
SWAPBUFFERS         1118
SWITCH              2BFE
SWITCHERUPDATELOOP  18B2
SWITCHER_CLASS_SIZE  12
SWITCHER_COLOR      E
SWITCHER_HEIGHT     14
SWITCHER_LIST       FCF4E
SWITCHER_WIDTH      14
SWITCHER_X          FD0F0
SWITCHER_Y          FD0F2
SWITCH_REF          4
TEMPRANDOMLONG      2A2E
TEMP_COLOR_STORAGE  248E
TEMP_RANDOM         FD11E
TEMP_SINE           2492
THEME               2C16
THEME_REF           0
TIME                8
TIME_SINCE_LAST_KEY  2C52
TRIANGLE_CLASS_SIZE  40
TRIANGLE_HALF_SIZE  A
TRIANGLE_TYPE_INIT  248A
TWOSEVENTYCHECK     26E2
UPDATEBALL          14E4
UPDATEBOX           1C1C
UPDATECOLOR         2B10
UPDATECROSS         1EDA
UPDATEOBSTACLES     1742
UPDATEPOWERUPS      187C
UPDATESCORE         1A54
UPDATESCOREPOWERUP  19EE
UPDATESWITCHER      2A6E
UPDATESWITCHERS     18AA
UPDATETRIANGLE      2292
UPDATE_TABLE        FD112
UPPER_Y             2962
